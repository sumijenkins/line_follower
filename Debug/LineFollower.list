
LineFollower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f38  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003088  08003088  00005024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003088  08003088  00005024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003088  08003088  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003088  08003088  00004088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003090  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000024  080030b4  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080030b4  00005188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c945  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002001  00000000  00000000  00011991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e8  00000000  00000000  00013998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d8  00000000  00000000  00014280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000155bf  00000000  00000000  00014958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c773  00000000  00000000  00029f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082950  00000000  00000000  0003668a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8fda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e80  00000000  00000000  000b9020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000baea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002fe0 	.word	0x08002fe0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08002fe0 	.word	0x08002fe0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fc0e 	bl	8000c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f82c 	bl	8000458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f8c4 	bl	800058c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000404:	f000 f874 	bl	80004f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fa2d 	bl	8000868 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 fa2a 	bl	8000868 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000414:	2101      	movs	r1, #1
 8000416:	2000      	movs	r0, #0
 8000418:	f000 fa90 	bl	800093c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <main+0x60>)
 800041e:	22e1      	movs	r2, #225	@ 0xe1
 8000420:	0252      	lsls	r2, r2, #9
 8000422:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000424:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <main+0x60>)
 8000426:	2200      	movs	r2, #0
 8000428:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <main+0x60>)
 800042c:	2200      	movs	r2, #0
 800042e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000430:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <main+0x60>)
 8000432:	2200      	movs	r2, #0
 8000434:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <main+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <main+0x60>)
 800043e:	0019      	movs	r1, r3
 8000440:	2000      	movs	r0, #0
 8000442:	f000 fb21 	bl	8000a88 <BSP_COM_Init>
 8000446:	1e03      	subs	r3, r0, #0
 8000448:	d002      	beq.n	8000450 <main+0x5c>
  {
    Error_Handler();
 800044a:	f000 f917 	bl	800067c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044e:	46c0      	nop			@ (mov r8, r8)
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	e7fd      	b.n	8000450 <main+0x5c>
 8000454:	20000040 	.word	0x20000040

08000458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b08d      	sub	sp, #52	@ 0x34
 800045c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800045e:	2414      	movs	r4, #20
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	231c      	movs	r3, #28
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f002 fd8d 	bl	8002f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	2314      	movs	r3, #20
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f002 fd86 	bl	8002f88 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <SystemClock_Config+0x94>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <SystemClock_Config+0x94>)
 8000482:	2107      	movs	r1, #7
 8000484:	438a      	bics	r2, r1
 8000486:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2202      	movs	r2, #2
 800048c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2280      	movs	r2, #128	@ 0x80
 8000492:	0052      	lsls	r2, r2, #1
 8000494:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2280      	movs	r2, #128	@ 0x80
 800049a:	0152      	lsls	r2, r2, #5
 800049c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2240      	movs	r2, #64	@ 0x40
 80004a2:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 f80c 	bl	80014c4 <HAL_RCC_OscConfig>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004b0:	f000 f8e4 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	003b      	movs	r3, r7
 80004b6:	2207      	movs	r2, #7
 80004b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ba:	003b      	movs	r3, r7
 80004bc:	2200      	movs	r2, #0
 80004be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004c0:	003b      	movs	r3, r7
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c6:	003b      	movs	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d2:	003b      	movs	r3, r7
 80004d4:	2100      	movs	r1, #0
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f9d8 	bl	800188c <HAL_RCC_ClockConfig>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80004e0:	f000 f8cc 	bl	800067c <Error_Handler>
  }
}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b00d      	add	sp, #52	@ 0x34
 80004ea:	bd90      	pop	{r4, r7, pc}
 80004ec:	40022000 	.word	0x40022000

080004f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004f4:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 80004f6:	4a24      	ldr	r2, [pc, #144]	@ (8000588 <MX_USART1_UART_Init+0x98>)
 80004f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004fa:	4b22      	ldr	r3, [pc, #136]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 80004fc:	22e1      	movs	r2, #225	@ 0xe1
 80004fe:	0252      	lsls	r2, r2, #9
 8000500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000502:	4b20      	ldr	r3, [pc, #128]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000508:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000516:	220c      	movs	r2, #12
 8000518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800051a:	4b1a      	ldr	r3, [pc, #104]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000520:	4b18      	ldr	r3, [pc, #96]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000526:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800052c:	4b15      	ldr	r3, [pc, #84]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800052e:	2200      	movs	r2, #0
 8000530:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000532:	4b14      	ldr	r3, [pc, #80]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000538:	4b12      	ldr	r3, [pc, #72]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 fc30 	bl	8001da0 <HAL_UART_Init>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000544:	f000 f89a 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000548:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800054a:	2100      	movs	r1, #0
 800054c:	0018      	movs	r0, r3
 800054e:	f002 fc3b 	bl	8002dc8 <HAL_UARTEx_SetTxFifoThreshold>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000556:	f000 f891 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800055c:	2100      	movs	r1, #0
 800055e:	0018      	movs	r0, r3
 8000560:	f002 fc72 	bl	8002e48 <HAL_UARTEx_SetRxFifoThreshold>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000568:	f000 f888 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <MX_USART1_UART_Init+0x94>)
 800056e:	0018      	movs	r0, r3
 8000570:	f002 fbf0 	bl	8002d54 <HAL_UARTEx_DisableFifoMode>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000578:	f000 f880 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	20000050 	.word	0x20000050
 8000588:	40013800 	.word	0x40013800

0800058c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	@ 0x2c
 8000590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	2414      	movs	r4, #20
 8000594:	193b      	adds	r3, r7, r4
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 fcf3 	bl	8002f88 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005a6:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005a8:	2104      	movs	r1, #4
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ae:	4b30      	ldr	r3, [pc, #192]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b2:	2204      	movs	r2, #4
 80005b4:	4013      	ands	r3, r2
 80005b6:	613b      	str	r3, [r7, #16]
 80005b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005c0:	2120      	movs	r1, #32
 80005c2:	430a      	orrs	r2, r1
 80005c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ca:	2220      	movs	r2, #32
 80005cc:	4013      	ands	r3, r2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005d8:	2101      	movs	r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005e2:	2201      	movs	r2, #1
 80005e4:	4013      	ands	r3, r2
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ea:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005f0:	2108      	movs	r1, #8
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_GPIO_Init+0xe4>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005fa:	2208      	movs	r2, #8
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_GPIO_Init+0xe8>)
 8000604:	2200      	movs	r2, #0
 8000606:	21c0      	movs	r1, #192	@ 0xc0
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ff3d 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800060e:	23c0      	movs	r3, #192	@ 0xc0
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4819      	ldr	r0, [pc, #100]	@ (8000678 <MX_GPIO_Init+0xec>)
 8000614:	2200      	movs	r2, #0
 8000616:	0019      	movs	r1, r3
 8000618:	f000 ff36 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	22c0      	movs	r2, #192	@ 0xc0
 8000620:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000634:	193b      	adds	r3, r7, r4
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_GPIO_Init+0xe8>)
 8000638:	0019      	movs	r1, r3
 800063a:	0010      	movs	r0, r2
 800063c:	f000 fdb2 	bl	80011a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000640:	0021      	movs	r1, r4
 8000642:	187b      	adds	r3, r7, r1
 8000644:	22c0      	movs	r2, #192	@ 0xc0
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2201      	movs	r2, #1
 800064e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	187b      	adds	r3, r7, r1
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065c:	187b      	adds	r3, r7, r1
 800065e:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <MX_GPIO_Init+0xec>)
 8000660:	0019      	movs	r1, r3
 8000662:	0010      	movs	r0, r2
 8000664:	f000 fd9e 	bl	80011a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b00b      	add	sp, #44	@ 0x2c
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	50000800 	.word	0x50000800
 8000678:	50000c00 	.word	0x50000c00

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <HAL_MspInit+0x44>)
 8000690:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <HAL_MspInit+0x44>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	641a      	str	r2, [r3, #64]	@ 0x40
 800069a:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <HAL_MspInit+0x44>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <HAL_MspInit+0x44>)
 80006a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006aa:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_MspInit+0x44>)
 80006ac:	2180      	movs	r1, #128	@ 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_MspInit+0x44>)
 80006b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006b8:	2380      	movs	r3, #128	@ 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	40021000 	.word	0x40021000

080006d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b093      	sub	sp, #76	@ 0x4c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	2334      	movs	r3, #52	@ 0x34
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	0018      	movs	r0, r3
 80006de:	2314      	movs	r3, #20
 80006e0:	001a      	movs	r2, r3
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 fc50 	bl	8002f88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e8:	2414      	movs	r4, #20
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	0018      	movs	r0, r3
 80006ee:	2320      	movs	r3, #32
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 fc48 	bl	8002f88 <memset>
  if(huart->Instance==USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a26      	ldr	r2, [pc, #152]	@ (8000798 <HAL_UART_MspInit+0xc8>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d146      	bne.n	8000790 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2201      	movs	r2, #1
 8000706:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800070e:	193b      	adds	r3, r7, r4
 8000710:	0018      	movs	r0, r3
 8000712:	f001 fa4b 	bl	8001bac <HAL_RCCEx_PeriphCLKConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800071a:	f7ff ffaf 	bl	800067c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <HAL_UART_MspInit+0xcc>)
 8000720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000722:	4b1e      	ldr	r3, [pc, #120]	@ (800079c <HAL_UART_MspInit+0xcc>)
 8000724:	2180      	movs	r1, #128	@ 0x80
 8000726:	01c9      	lsls	r1, r1, #7
 8000728:	430a      	orrs	r2, r1
 800072a:	641a      	str	r2, [r3, #64]	@ 0x40
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <HAL_UART_MspInit+0xcc>)
 800072e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	01db      	lsls	r3, r3, #7
 8000734:	4013      	ands	r3, r2
 8000736:	613b      	str	r3, [r7, #16]
 8000738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b18      	ldr	r3, [pc, #96]	@ (800079c <HAL_UART_MspInit+0xcc>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800073e:	4b17      	ldr	r3, [pc, #92]	@ (800079c <HAL_UART_MspInit+0xcc>)
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <HAL_UART_MspInit+0xcc>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000752:	2134      	movs	r1, #52	@ 0x34
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2203      	movs	r2, #3
 8000758:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2202      	movs	r2, #2
 800075e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2204      	movs	r2, #4
 8000770:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	187a      	adds	r2, r7, r1
 8000774:	23a0      	movs	r3, #160	@ 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fd12 	bl	80011a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	201b      	movs	r0, #27
 8000786:	f000 fb71 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800078a:	201b      	movs	r0, #27
 800078c:	f000 fb83 	bl	8000e96 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b013      	add	sp, #76	@ 0x4c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40013800 	.word	0x40013800
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a4:	46c0      	nop			@ (mov r8, r8)
 80007a6:	e7fd      	b.n	80007a4 <NMI_Handler+0x4>

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b4:	46c0      	nop			@ (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 fa88 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f934 	bl	8000a44 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80007dc:	46c0      	nop			@ (mov r8, r8)
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
	...

080007e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <USART1_IRQHandler+0x14>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f001 fb2e 	bl	8001e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	20000050 	.word	0x20000050

080007fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <SystemInit+0x14>)
 8000802:	2280      	movs	r2, #128	@ 0x80
 8000804:	0512      	lsls	r2, r2, #20
 8000806:	609a      	str	r2, [r3, #8]
#endif
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f7ff fff0 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800081c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800081e:	e003      	b.n	8000828 <LoopCopyDataInit>

08000820 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000822:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000824:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000826:	3104      	adds	r1, #4

08000828 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <LoopForever+0xa>)
  ldr r3, =_edata
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <LoopForever+0xe>)
  adds r2, r0, r1
 800082c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800082e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000830:	d3f6      	bcc.n	8000820 <CopyDataInit>
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <LoopForever+0x12>)
  b LoopFillZerobss
 8000834:	e002      	b.n	800083c <LoopFillZerobss>

08000836 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  str  r3, [r2]
 8000838:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083a:	3204      	adds	r2, #4

0800083c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800083c:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <LoopForever+0x16>)
  cmp r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000840:	d3f9      	bcc.n	8000836 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000842:	f002 fba9 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fdd5 	bl	80003f4 <main>

0800084a <LoopForever>:

LoopForever:
    b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20007800 	.word	0x20007800
  ldr r3, =_sidata
 8000850:	08003090 	.word	0x08003090
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000858:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800085c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000860:	20000188 	.word	0x20000188

08000864 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_IRQHandler>
	...

08000868 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	@ 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	0002      	movs	r2, r0
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d007      	beq.n	8000890 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d003      	beq.n	8000890 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000888:	2302      	movs	r3, #2
 800088a:	425b      	negs	r3, r3
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
 800088e:	e04a      	b.n	8000926 <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d10c      	bne.n	80008b2 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000898:	4b25      	ldr	r3, [pc, #148]	@ (8000930 <BSP_LED_Init+0xc8>)
 800089a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <BSP_LED_Init+0xc8>)
 800089e:	2101      	movs	r1, #1
 80008a0:	430a      	orrs	r2, r1
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <BSP_LED_Init+0xc8>)
 80008a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008a8:	2201      	movs	r2, #1
 80008aa:	4013      	ands	r3, r2
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	e00b      	b.n	80008ca <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <BSP_LED_Init+0xc8>)
 80008b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000930 <BSP_LED_Init+0xc8>)
 80008b8:	2104      	movs	r1, #4
 80008ba:	430a      	orrs	r2, r1
 80008bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <BSP_LED_Init+0xc8>)
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	2204      	movs	r2, #4
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781a      	ldrb	r2, [r3, #0]
 80008ce:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <BSP_LED_Init+0xcc>)
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	5ad3      	ldrh	r3, [r2, r3]
 80008d4:	001a      	movs	r2, r3
 80008d6:	2110      	movs	r1, #16
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2203      	movs	r2, #3
 80008ec:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <BSP_LED_Init+0xd0>)
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	58d3      	ldr	r3, [r2, r3]
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fc51 	bl	80011a4 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d10d      	bne.n	8000926 <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <BSP_LED_Init+0xd0>)
 8000910:	0092      	lsls	r2, r2, #2
 8000912:	58d0      	ldr	r0, [r2, r3]
 8000914:	1dfb      	adds	r3, r7, #7
 8000916:	781a      	ldrb	r2, [r3, #0]
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <BSP_LED_Init+0xcc>)
 800091a:	0052      	lsls	r2, r2, #1
 800091c:	5ad3      	ldrh	r3, [r2, r3]
 800091e:	2201      	movs	r2, #1
 8000920:	0019      	movs	r1, r3
 8000922:	f000 fdb1 	bl	8001488 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b00a      	add	sp, #40	@ 0x28
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	08003058 	.word	0x08003058
 8000938:	20000008 	.word	0x20000008

0800093c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	1dbb      	adds	r3, r7, #6
 800094a:	1c0a      	adds	r2, r1, #0
 800094c:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800094e:	4b36      	ldr	r3, [pc, #216]	@ (8000a28 <BSP_PB_Init+0xec>)
 8000950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000952:	4b35      	ldr	r3, [pc, #212]	@ (8000a28 <BSP_PB_Init+0xec>)
 8000954:	2104      	movs	r1, #4
 8000956:	430a      	orrs	r2, r1
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <BSP_PB_Init+0xec>)
 800095c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095e:	2204      	movs	r2, #4
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000966:	2380      	movs	r3, #128	@ 0x80
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	001a      	movs	r2, r3
 800096c:	210c      	movs	r1, #12
 800096e:	187b      	adds	r3, r7, r1
 8000970:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2201      	movs	r2, #1
 8000976:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2202      	movs	r2, #2
 800097c:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10d      	bne.n	80009a2 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <BSP_PB_Init+0xf0>)
 8000992:	0092      	lsls	r2, r2, #2
 8000994:	58d3      	ldr	r3, [r2, r3]
 8000996:	187a      	adds	r2, r7, r1
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fc02 	bl	80011a4 <HAL_GPIO_Init>
 80009a0:	e03c      	b.n	8000a1c <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 80009a2:	210c      	movs	r1, #12
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	4a22      	ldr	r2, [pc, #136]	@ (8000a30 <BSP_PB_Init+0xf4>)
 80009a8:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781a      	ldrb	r2, [r3, #0]
 80009ae:	4b1f      	ldr	r3, [pc, #124]	@ (8000a2c <BSP_PB_Init+0xf0>)
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	58d3      	ldr	r3, [r2, r3]
 80009b4:	187a      	adds	r2, r7, r1
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f000 fbf3 	bl	80011a4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	0013      	movs	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4a1a      	ldr	r2, [pc, #104]	@ (8000a34 <BSP_PB_Init+0xf8>)
 80009cc:	1898      	adds	r0, r3, r2
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <BSP_PB_Init+0xfc>)
 80009d4:	0092      	lsls	r2, r2, #2
 80009d6:	58d3      	ldr	r3, [r2, r3]
 80009d8:	0019      	movs	r1, r3
 80009da:	f000 fb87 	bl	80010ec <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	0013      	movs	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	189b      	adds	r3, r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <BSP_PB_Init+0xf8>)
 80009ec:	1898      	adds	r0, r3, r2
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <BSP_PB_Init+0x100>)
 80009f4:	0092      	lsls	r2, r2, #2
 80009f6:	58d3      	ldr	r3, [r2, r3]
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f000 fb44 	bl	8001088 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000a00:	2007      	movs	r0, #7
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <BSP_PB_Init+0x104>)
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	58d3      	ldr	r3, [r2, r3]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0019      	movs	r1, r3
 8000a10:	f000 fa2c 	bl	8000e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000a14:	2307      	movs	r3, #7
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fa3d 	bl	8000e96 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b008      	add	sp, #32
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	10210000 	.word	0x10210000
 8000a34:	200000e4 	.word	0x200000e4
 8000a38:	0800305c 	.word	0x0800305c
 8000a3c:	20000014 	.word	0x20000014
 8000a40:	20000018 	.word	0x20000018

08000a44 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	0013      	movs	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	189b      	adds	r3, r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <BSP_PB_IRQHandler+0x2c>)
 8000a5e:	189b      	adds	r3, r3, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fb55 	bl	8001110 <HAL_EXTI_IRQHandler>
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b002      	add	sp, #8
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000e4 	.word	0x200000e4

08000a74 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	0002      	movs	r2, r0
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	425b      	negs	r3, r3
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	e018      	b.n	8000adc <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2294      	movs	r2, #148	@ 0x94
 8000ab0:	435a      	muls	r2, r3
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <BSP_COM_Init+0x60>)
 8000ab4:	18d3      	adds	r3, r2, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 f856 	bl	8000b68 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	2294      	movs	r2, #148	@ 0x94
 8000ac2:	435a      	muls	r2, r3
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <BSP_COM_Init+0x60>)
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 f80d 	bl	8000aec <MX_USART2_Init>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d002      	beq.n	8000adc <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	425b      	negs	r3, r3
 8000ada:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000adc:	68fb      	ldr	r3, [r7, #12]
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b004      	add	sp, #16
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	200000f0 	.word	0x200000f0

08000aec <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_USART2_Init+0x68>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	220c      	movs	r2, #12
 8000b0a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	895b      	ldrh	r3, [r3, #10]
 8000b10:	001a      	movs	r2, r3
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	891b      	ldrh	r3, [r3, #8]
 8000b22:	001a      	movs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	899b      	ldrh	r3, [r3, #12]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	0212      	lsls	r2, r2, #8
 8000b38:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 f92c 	bl	8001da0 <HAL_UART_Init>
 8000b48:	0003      	movs	r3, r0
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	20000004 	.word	0x20000004

08000b58 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff ff89 	bl	8000a74 <BSP_PB_Callback>
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b08b      	sub	sp, #44	@ 0x2c
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000b70:	4b28      	ldr	r3, [pc, #160]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b74:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b7c:	4b25      	ldr	r3, [pc, #148]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b80:	2201      	movs	r2, #1
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000b88:	4b22      	ldr	r3, [pc, #136]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8c:	4b21      	ldr	r3, [pc, #132]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b8e:	2101      	movs	r1, #1
 8000b90:	430a      	orrs	r2, r1
 8000b92:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b94:	4b1f      	ldr	r3, [pc, #124]	@ (8000c14 <COM1_MspInit+0xac>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <COM1_MspInit+0xac>)
 8000ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c14 <COM1_MspInit+0xac>)
 8000ba6:	2180      	movs	r1, #128	@ 0x80
 8000ba8:	0289      	lsls	r1, r1, #10
 8000baa:	430a      	orrs	r2, r1
 8000bac:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bae:	4b19      	ldr	r3, [pc, #100]	@ (8000c14 <COM1_MspInit+0xac>)
 8000bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bb2:	2380      	movs	r3, #128	@ 0x80
 8000bb4:	029b      	lsls	r3, r3, #10
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000bbc:	2414      	movs	r4, #20
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2202      	movs	r2, #2
 8000bce:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2201      	movs	r2, #1
 8000bda:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000bdc:	193a      	adds	r2, r7, r4
 8000bde:	23a0      	movs	r3, #160	@ 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fadd 	bl	80011a4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2208      	movs	r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000bfc:	193a      	adds	r2, r7, r4
 8000bfe:	23a0      	movs	r3, #160	@ 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 facd 	bl	80011a4 <HAL_GPIO_Init>
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b00b      	add	sp, #44	@ 0x2c
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	2003      	movs	r0, #3
 8000c26:	f000 f80f 	bl	8000c48 <HAL_InitTick>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e001      	b.n	8000c3a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c36:	f7ff fd27 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c50:	230f      	movs	r3, #15
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <HAL_InitTick+0x88>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d02b      	beq.n	8000cb8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <HAL_InitTick+0x8c>)
 8000c62:	681c      	ldr	r4, [r3, #0]
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <HAL_InitTick+0x88>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	0019      	movs	r1, r3
 8000c6a:	23fa      	movs	r3, #250	@ 0xfa
 8000c6c:	0098      	lsls	r0, r3, #2
 8000c6e:	f7ff fa4b 	bl	8000108 <__udivsi3>
 8000c72:	0003      	movs	r3, r0
 8000c74:	0019      	movs	r1, r3
 8000c76:	0020      	movs	r0, r4
 8000c78:	f7ff fa46 	bl	8000108 <__udivsi3>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f919 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d112      	bne.n	8000cae <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d80a      	bhi.n	8000ca4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	0018      	movs	r0, r3
 8000c98:	f000 f8e8 	bl	8000e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <HAL_InitTick+0x90>)
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	e00d      	b.n	8000cc0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e008      	b.n	8000cc0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cae:	230f      	movs	r3, #15
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e003      	b.n	8000cc0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
}
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b005      	add	sp, #20
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			@ (mov r8, r8)
 8000cd0:	20000020 	.word	0x20000020
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	2000001c 	.word	0x2000001c

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	20000020 	.word	0x20000020
 8000cfc:	20000184 	.word	0x20000184

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	20000184 	.word	0x20000184

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d26:	d809      	bhi.n	8000d3c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	001a      	movs	r2, r3
 8000d2e:	231f      	movs	r3, #31
 8000d30:	401a      	ands	r2, r3
 8000d32:	4b04      	ldr	r3, [pc, #16]	@ (8000d44 <__NVIC_EnableIRQ+0x30>)
 8000d34:	2101      	movs	r1, #1
 8000d36:	4091      	lsls	r1, r2
 8000d38:	000a      	movs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	e000e100 	.word	0xe000e100

08000d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	0002      	movs	r2, r0
 8000d50:	6039      	str	r1, [r7, #0]
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d5c:	d828      	bhi.n	8000db0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e1c <__NVIC_SetPriority+0xd4>)
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b25b      	sxtb	r3, r3
 8000d66:	089b      	lsrs	r3, r3, #2
 8000d68:	33c0      	adds	r3, #192	@ 0xc0
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	589b      	ldr	r3, [r3, r2]
 8000d6e:	1dfa      	adds	r2, r7, #7
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	0011      	movs	r1, r2
 8000d74:	2203      	movs	r2, #3
 8000d76:	400a      	ands	r2, r1
 8000d78:	00d2      	lsls	r2, r2, #3
 8000d7a:	21ff      	movs	r1, #255	@ 0xff
 8000d7c:	4091      	lsls	r1, r2
 8000d7e:	000a      	movs	r2, r1
 8000d80:	43d2      	mvns	r2, r2
 8000d82:	401a      	ands	r2, r3
 8000d84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	019b      	lsls	r3, r3, #6
 8000d8a:	22ff      	movs	r2, #255	@ 0xff
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	0018      	movs	r0, r3
 8000d94:	2303      	movs	r3, #3
 8000d96:	4003      	ands	r3, r0
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9c:	481f      	ldr	r0, [pc, #124]	@ (8000e1c <__NVIC_SetPriority+0xd4>)
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	430a      	orrs	r2, r1
 8000da8:	33c0      	adds	r3, #192	@ 0xc0
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dae:	e031      	b.n	8000e14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e20 <__NVIC_SetPriority+0xd8>)
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0019      	movs	r1, r3
 8000db8:	230f      	movs	r3, #15
 8000dba:	400b      	ands	r3, r1
 8000dbc:	3b08      	subs	r3, #8
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3306      	adds	r3, #6
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	18d3      	adds	r3, r2, r3
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	1dfa      	adds	r2, r7, #7
 8000dcc:	7812      	ldrb	r2, [r2, #0]
 8000dce:	0011      	movs	r1, r2
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	00d2      	lsls	r2, r2, #3
 8000dd6:	21ff      	movs	r1, #255	@ 0xff
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	000a      	movs	r2, r1
 8000ddc:	43d2      	mvns	r2, r2
 8000dde:	401a      	ands	r2, r3
 8000de0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	401a      	ands	r2, r3
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	2303      	movs	r3, #3
 8000df2:	4003      	ands	r3, r0
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df8:	4809      	ldr	r0, [pc, #36]	@ (8000e20 <__NVIC_SetPriority+0xd8>)
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	001c      	movs	r4, r3
 8000e00:	230f      	movs	r3, #15
 8000e02:	4023      	ands	r3, r4
 8000e04:	3b08      	subs	r3, #8
 8000e06:	089b      	lsrs	r3, r3, #2
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	3306      	adds	r3, #6
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	18c3      	adds	r3, r0, r3
 8000e10:	3304      	adds	r3, #4
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b003      	add	sp, #12
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	e000e100 	.word	0xe000e100
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	1e5a      	subs	r2, r3, #1
 8000e30:	2380      	movs	r3, #128	@ 0x80
 8000e32:	045b      	lsls	r3, r3, #17
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d301      	bcc.n	8000e3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e010      	b.n	8000e5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <SysTick_Config+0x44>)
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	3a01      	subs	r2, #1
 8000e42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e44:	2301      	movs	r3, #1
 8000e46:	425b      	negs	r3, r3
 8000e48:	2103      	movs	r1, #3
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f7ff ff7c 	bl	8000d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e50:	4b05      	ldr	r3, [pc, #20]	@ (8000e68 <SysTick_Config+0x44>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <SysTick_Config+0x44>)
 8000e58:	2207      	movs	r2, #7
 8000e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	e000e010 	.word	0xe000e010

08000e6c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	210f      	movs	r1, #15
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	1c02      	adds	r2, r0, #0
 8000e7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	0011      	movs	r1, r2
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff ff5d 	bl	8000d48 <__NVIC_SetPriority>
}
 8000e8e:	46c0      	nop			@ (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b004      	add	sp, #16
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	1dfb      	adds	r3, r7, #7
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ff33 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff ffaf 	bl	8000e24 <SysTick_Config>
 8000ec6:	0003      	movs	r3, r0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e050      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	@ 0x25
 8000ee6:	5c9b      	ldrb	r3, [r3, r2]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d008      	beq.n	8000f00 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2224      	movs	r2, #36	@ 0x24
 8000ef8:	2100      	movs	r1, #0
 8000efa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e041      	b.n	8000f84 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	438a      	bics	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	491c      	ldr	r1, [pc, #112]	@ (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000f30:	4b17      	ldr	r3, [pc, #92]	@ (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	221c      	movs	r2, #28
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	409a      	lsls	r2, r3
 8000f40:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_DMA_Abort+0xc0>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f62:	490a      	ldr	r1, [pc, #40]	@ (8000f8c <HAL_DMA_Abort+0xbc>)
 8000f64:	400a      	ands	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2225      	movs	r2, #37	@ 0x25
 8000f76:	2101      	movs	r1, #1
 8000f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2224      	movs	r2, #36	@ 0x24
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b002      	add	sp, #8
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	fffffeff 	.word	0xfffffeff
 8000f90:	40020000 	.word	0x40020000

08000f94 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2224      	movs	r2, #36	@ 0x24
 8000fa8:	2100      	movs	r1, #0
 8000faa:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2224      	movs	r2, #36	@ 0x24
 8000fb0:	5c9b      	ldrb	r3, [r3, r2]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_DMA_Abort_IT+0x26>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e05e      	b.n	8001078 <HAL_DMA_Abort_IT+0xe4>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2224      	movs	r2, #36	@ 0x24
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2225      	movs	r2, #37	@ 0x25
 8000fc6:	5c9b      	ldrb	r3, [r3, r2]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d007      	beq.n	8000fde <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e049      	b.n	8001072 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	210e      	movs	r1, #14
 8000fea:	438a      	bics	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	438a      	bics	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001008:	491d      	ldr	r1, [pc, #116]	@ (8001080 <HAL_DMA_Abort_IT+0xec>)
 800100a:	400a      	ands	r2, r1
 800100c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800100e:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <HAL_DMA_Abort_IT+0xf0>)
 8001010:	6859      	ldr	r1, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	221c      	movs	r2, #28
 8001018:	4013      	ands	r3, r2
 800101a:	2201      	movs	r2, #1
 800101c:	409a      	lsls	r2, r3
 800101e:	4b19      	ldr	r3, [pc, #100]	@ (8001084 <HAL_DMA_Abort_IT+0xf0>)
 8001020:	430a      	orrs	r2, r1
 8001022:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800102c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00c      	beq.n	8001050 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001040:	490f      	ldr	r1, [pc, #60]	@ (8001080 <HAL_DMA_Abort_IT+0xec>)
 8001042:	400a      	ands	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800104e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2225      	movs	r2, #37	@ 0x25
 8001054:	2101      	movs	r1, #1
 8001056:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2224      	movs	r2, #36	@ 0x24
 800105c:	2100      	movs	r1, #0
 800105e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	0010      	movs	r0, r2
 8001070:	4798      	blx	r3
    }
  }
  return status;
 8001072:	230f      	movs	r3, #15
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	781b      	ldrb	r3, [r3, #0]
}
 8001078:	0018      	movs	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	b004      	add	sp, #16
 800107e:	bd80      	pop	{r7, pc}
 8001080:	fffffeff 	.word	0xfffffeff
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	200b      	movs	r0, #11
 8001094:	183b      	adds	r3, r7, r0
 8001096:	1c0a      	adds	r2, r1, #0
 8001098:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2317      	movs	r3, #23
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 80010a2:	183b      	adds	r3, r7, r0
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d010      	beq.n	80010cc <HAL_EXTI_RegisterCallback+0x44>
 80010aa:	dc13      	bgt.n	80010d4 <HAL_EXTI_RegisterCallback+0x4c>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <HAL_EXTI_RegisterCallback+0x2e>
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d007      	beq.n	80010c4 <HAL_EXTI_RegisterCallback+0x3c>
 80010b4:	e00e      	b.n	80010d4 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]
      break;
 80010c2:	e00c      	b.n	80010de <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
      break;
 80010ca:	e008      	b.n	80010de <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	609a      	str	r2, [r3, #8]
      break;
 80010d2:	e004      	b.n	80010de <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 80010d4:	2317      	movs	r3, #23
 80010d6:	18fb      	adds	r3, r7, r3
 80010d8:	2201      	movs	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
      break;
 80010dc:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80010de:	2317      	movs	r3, #23
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b006      	add	sp, #24
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d101      	bne.n	8001100 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e003      	b.n	8001108 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001106:	2300      	movs	r3, #0
  }
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0c1b      	lsrs	r3, r3, #16
 800111e:	2201      	movs	r2, #1
 8001120:	4013      	ands	r3, r2
 8001122:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	221f      	movs	r2, #31
 800112a:	4013      	ands	r3, r2
 800112c:	2201      	movs	r2, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	015b      	lsls	r3, r3, #5
 8001138:	4a18      	ldr	r2, [pc, #96]	@ (800119c <HAL_EXTI_IRQHandler+0x8c>)
 800113a:	4694      	mov	ip, r2
 800113c:	4463      	add	r3, ip
 800113e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	015b      	lsls	r3, r3, #5
 8001168:	4a0d      	ldr	r2, [pc, #52]	@ (80011a0 <HAL_EXTI_IRQHandler+0x90>)
 800116a:	4694      	mov	ip, r2
 800116c:	4463      	add	r3, ip
 800116e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4798      	blx	r3
    }
  }
}
 8001194:	46c0      	nop			@ (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	b006      	add	sp, #24
 800119a:	bd80      	pop	{r7, pc}
 800119c:	4002180c 	.word	0x4002180c
 80011a0:	40021810 	.word	0x40021810

080011a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011b2:	e153      	b.n	800145c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <HAL_GPIO_Init+0x28>
 80011ca:	e144      	b.n	8001456 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x38>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d125      	bne.n	8001228 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	58d3      	ldr	r3, [r2, r3]
 80011e8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2207      	movs	r2, #7
 80011ee:	4013      	ands	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	220f      	movs	r2, #15
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	43da      	mvns	r2, r3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	4013      	ands	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	220f      	movs	r2, #15
 8001206:	401a      	ands	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	2107      	movs	r1, #7
 800120c:	400b      	ands	r3, r1
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	4313      	orrs	r3, r2
 8001218:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	6979      	ldr	r1, [r7, #20]
 8001226:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	4013      	ands	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2203      	movs	r2, #3
 8001246:	401a      	ands	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d00b      	beq.n	800127c <HAL_GPIO_Init+0xd8>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001270:	2b11      	cmp	r3, #17
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b12      	cmp	r3, #18
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4013      	ands	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	4013      	ands	r3, r2
 80012fc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4313      	orrs	r3, r2
 800130e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	055b      	lsls	r3, r3, #21
 800131e:	4013      	ands	r3, r2
 8001320:	d100      	bne.n	8001324 <HAL_GPIO_Init+0x180>
 8001322:	e098      	b.n	8001456 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001324:	4a53      	ldr	r2, [pc, #332]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3318      	adds	r3, #24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	589b      	ldr	r3, [r3, r2]
 8001330:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2203      	movs	r2, #3
 8001336:	4013      	ands	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	220f      	movs	r2, #15
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	4013      	ands	r3, r2
 8001346:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	23a0      	movs	r3, #160	@ 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	429a      	cmp	r2, r3
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x1e2>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a48      	ldr	r2, [pc, #288]	@ (8001478 <HAL_GPIO_Init+0x2d4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x1de>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a47      	ldr	r2, [pc, #284]	@ (800147c <HAL_GPIO_Init+0x2d8>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x1da>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a46      	ldr	r2, [pc, #280]	@ (8001480 <HAL_GPIO_Init+0x2dc>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x1d6>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a45      	ldr	r2, [pc, #276]	@ (8001484 <HAL_GPIO_Init+0x2e0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x1d2>
 8001372:	2305      	movs	r3, #5
 8001374:	e008      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001376:	2306      	movs	r3, #6
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 800137a:	2303      	movs	r3, #3
 800137c:	e004      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 800137e:	2302      	movs	r3, #2
 8001380:	e002      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <HAL_GPIO_Init+0x1e4>
 8001386:	2300      	movs	r3, #0
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	2103      	movs	r1, #3
 800138c:	400a      	ands	r2, r1
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4093      	lsls	r3, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	4313      	orrs	r3, r2
 8001396:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001398:	4936      	ldr	r1, [pc, #216]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	3318      	adds	r3, #24
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80013a6:	4a33      	ldr	r2, [pc, #204]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	58d3      	ldr	r3, [r2, r3]
 80013ac:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	43da      	mvns	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	4013      	ands	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	025b      	lsls	r3, r3, #9
 80013c0:	4013      	ands	r3, r2
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80013cc:	4929      	ldr	r1, [pc, #164]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80013d4:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 80013d6:	2384      	movs	r3, #132	@ 0x84
 80013d8:	58d3      	ldr	r3, [r2, r3]
 80013da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43da      	mvns	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	4013      	ands	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	2380      	movs	r3, #128	@ 0x80
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d003      	beq.n	80013fa <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80013fa:	491e      	ldr	r1, [pc, #120]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 80013fc:	2284      	movs	r2, #132	@ 0x84
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001402:	4b1c      	ldr	r3, [pc, #112]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43da      	mvns	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	4013      	ands	r3, r2
 8001410:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	035b      	lsls	r3, r3, #13
 800141a:	4013      	ands	r3, r2
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001426:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	43da      	mvns	r2, r3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	4013      	ands	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	039b      	lsls	r3, r3, #14
 8001444:	4013      	ands	r3, r2
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_GPIO_Init+0x2d0>)
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	3301      	adds	r3, #1
 800145a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	40da      	lsrs	r2, r3
 8001464:	1e13      	subs	r3, r2, #0
 8001466:	d000      	beq.n	800146a <HAL_GPIO_Init+0x2c6>
 8001468:	e6a4      	b.n	80011b4 <HAL_GPIO_Init+0x10>
  }
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b006      	add	sp, #24
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021800 	.word	0x40021800
 8001478:	50000400 	.word	0x50000400
 800147c:	50000800 	.word	0x50000800
 8001480:	50000c00 	.word	0x50000c00
 8001484:	50001400 	.word	0x50001400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	0008      	movs	r0, r1
 8001492:	0011      	movs	r1, r2
 8001494:	1cbb      	adds	r3, r7, #2
 8001496:	1c02      	adds	r2, r0, #0
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	1c7b      	adds	r3, r7, #1
 800149c:	1c0a      	adds	r2, r1, #0
 800149e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	1c7b      	adds	r3, r7, #1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a8:	1cbb      	adds	r3, r7, #2
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b2:	1cbb      	adds	r3, r7, #2
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e1d0      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1e>
 80014e0:	e069      	b.n	80015b6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e2:	4bc8      	ldr	r3, [pc, #800]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2238      	movs	r2, #56	@ 0x38
 80014e8:	4013      	ands	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d15d      	bne.n	80015b6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e1bc      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	025b      	lsls	r3, r3, #9
 8001506:	429a      	cmp	r2, r3
 8001508:	d107      	bne.n	800151a <HAL_RCC_OscConfig+0x56>
 800150a:	4bbe      	ldr	r3, [pc, #760]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4bbd      	ldr	r3, [pc, #756]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0249      	lsls	r1, r1, #9
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e020      	b.n	800155c <HAL_RCC_OscConfig+0x98>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	23a0      	movs	r3, #160	@ 0xa0
 8001520:	02db      	lsls	r3, r3, #11
 8001522:	429a      	cmp	r2, r3
 8001524:	d10e      	bne.n	8001544 <HAL_RCC_OscConfig+0x80>
 8001526:	4bb7      	ldr	r3, [pc, #732]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4bb6      	ldr	r3, [pc, #728]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	02c9      	lsls	r1, r1, #11
 8001530:	430a      	orrs	r2, r1
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	4bb3      	ldr	r3, [pc, #716]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4bb2      	ldr	r3, [pc, #712]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	0249      	lsls	r1, r1, #9
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x98>
 8001544:	4baf      	ldr	r3, [pc, #700]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4bae      	ldr	r3, [pc, #696]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800154a:	49af      	ldr	r1, [pc, #700]	@ (8001808 <HAL_RCC_OscConfig+0x344>)
 800154c:	400a      	ands	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	4bac      	ldr	r3, [pc, #688]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4bab      	ldr	r3, [pc, #684]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001556:	49ad      	ldr	r1, [pc, #692]	@ (800180c <HAL_RCC_OscConfig+0x348>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d014      	beq.n	800158e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fbcc 	bl	8000d00 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800156e:	f7ff fbc7 	bl	8000d00 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b64      	cmp	r3, #100	@ 0x64
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e17b      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001580:	4ba0      	ldr	r3, [pc, #640]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	029b      	lsls	r3, r3, #10
 8001588:	4013      	ands	r3, r2
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0xaa>
 800158c:	e013      	b.n	80015b6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fbb7 	bl	8000d00 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001598:	f7ff fbb2 	bl	8000d00 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	@ 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e166      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015aa:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	029b      	lsls	r3, r3, #10
 80015b2:	4013      	ands	r3, r2
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0xfe>
 80015c0:	e086      	b.n	80016d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b90      	ldr	r3, [pc, #576]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2238      	movs	r2, #56	@ 0x38
 80015c8:	4013      	ands	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d12f      	bne.n	8001632 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e14c      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b89      	ldr	r3, [pc, #548]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a8b      	ldr	r2, [pc, #556]	@ (8001810 <HAL_RCC_OscConfig+0x34c>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	0019      	movs	r1, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	021a      	lsls	r2, r3, #8
 80015ee:	4b85      	ldr	r3, [pc, #532]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80015f0:	430a      	orrs	r2, r1
 80015f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015fa:	4b82      	ldr	r3, [pc, #520]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a85      	ldr	r2, [pc, #532]	@ (8001814 <HAL_RCC_OscConfig+0x350>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800160e:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0adb      	lsrs	r3, r3, #11
 8001614:	2207      	movs	r2, #7
 8001616:	4013      	ands	r3, r2
 8001618:	4a7f      	ldr	r2, [pc, #508]	@ (8001818 <HAL_RCC_OscConfig+0x354>)
 800161a:	40da      	lsrs	r2, r3
 800161c:	4b7f      	ldr	r3, [pc, #508]	@ (800181c <HAL_RCC_OscConfig+0x358>)
 800161e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001620:	4b7f      	ldr	r3, [pc, #508]	@ (8001820 <HAL_RCC_OscConfig+0x35c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fb0f 	bl	8000c48 <HAL_InitTick>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d050      	beq.n	80016d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e122      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d030      	beq.n	800169c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800163a:	4b72      	ldr	r3, [pc, #456]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a75      	ldr	r2, [pc, #468]	@ (8001814 <HAL_RCC_OscConfig+0x350>)
 8001640:	4013      	ands	r3, r2
 8001642:	0019      	movs	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	4b6e      	ldr	r3, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800164e:	4b6d      	ldr	r3, [pc, #436]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b6c      	ldr	r3, [pc, #432]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001654:	2180      	movs	r1, #128	@ 0x80
 8001656:	0049      	lsls	r1, r1, #1
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb50 	bl	8000d00 <HAL_GetTick>
 8001660:	0003      	movs	r3, r0
 8001662:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001666:	f7ff fb4b 	bl	8000d00 <HAL_GetTick>
 800166a:	0002      	movs	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e0ff      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001678:	4b62      	ldr	r3, [pc, #392]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	@ 0x80
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4013      	ands	r3, r2
 8001682:	d0f0      	beq.n	8001666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001684:	4b5f      	ldr	r3, [pc, #380]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a61      	ldr	r2, [pc, #388]	@ (8001810 <HAL_RCC_OscConfig+0x34c>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	021a      	lsls	r2, r3, #8
 8001694:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001696:	430a      	orrs	r2, r1
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	e019      	b.n	80016d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800169c:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b58      	ldr	r3, [pc, #352]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80016a2:	4960      	ldr	r1, [pc, #384]	@ (8001824 <HAL_RCC_OscConfig+0x360>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb2a 	bl	8000d00 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fb25 	bl	8000d00 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e0d9      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4013      	ands	r3, r2
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2208      	movs	r2, #8
 80016d6:	4013      	ands	r3, r2
 80016d8:	d042      	beq.n	8001760 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2238      	movs	r2, #56	@ 0x38
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b18      	cmp	r3, #24
 80016e4:	d105      	bne.n	80016f2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d138      	bne.n	8001760 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0c2      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d019      	beq.n	800172e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80016fa:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80016fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fafb 	bl	8000d00 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001710:	f7ff faf6 	bl	8000d00 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e0aa      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001722:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	d0f1      	beq.n	8001710 <HAL_RCC_OscConfig+0x24c>
 800172c:	e018      	b.n	8001760 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800172e:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001730:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001734:	2101      	movs	r1, #1
 8001736:	438a      	bics	r2, r1
 8001738:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fae1 	bl	8000d00 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001744:	f7ff fadc 	bl	8000d00 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e090      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001756:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d1f1      	bne.n	8001744 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d100      	bne.n	800176c <HAL_RCC_OscConfig+0x2a8>
 800176a:	e084      	b.n	8001876 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176c:	230f      	movs	r3, #15
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2238      	movs	r2, #56	@ 0x38
 800177a:	4013      	ands	r3, r2
 800177c:	2b20      	cmp	r3, #32
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d000      	beq.n	800178a <HAL_RCC_OscConfig+0x2c6>
 8001788:	e075      	b.n	8001876 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e074      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2e0>
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 8001798:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800179a:	4b1a      	ldr	r3, [pc, #104]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 800179c:	2101      	movs	r1, #1
 800179e:	430a      	orrs	r2, r1
 80017a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x31a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x302>
 80017ac:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017b2:	2104      	movs	r1, #4
 80017b4:	430a      	orrs	r2, r1
 80017b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017be:	2101      	movs	r1, #1
 80017c0:	430a      	orrs	r2, r1
 80017c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x31a>
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017cc:	2101      	movs	r1, #1
 80017ce:	438a      	bics	r2, r1
 80017d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_RCC_OscConfig+0x340>)
 80017d8:	2104      	movs	r1, #4
 80017da:	438a      	bics	r2, r1
 80017dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d028      	beq.n	8001838 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fa8b 	bl	8000d00 <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017ee:	e01d      	b.n	800182c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fa86 	bl	8000d00 <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <HAL_RCC_OscConfig+0x364>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d915      	bls.n	800182c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e039      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
 8001804:	40021000 	.word	0x40021000
 8001808:	fffeffff 	.word	0xfffeffff
 800180c:	fffbffff 	.word	0xfffbffff
 8001810:	ffff80ff 	.word	0xffff80ff
 8001814:	ffffc7ff 	.word	0xffffc7ff
 8001818:	02dc6c00 	.word	0x02dc6c00
 800181c:	20000000 	.word	0x20000000
 8001820:	2000001c 	.word	0x2000001c
 8001824:	fffffeff 	.word	0xfffffeff
 8001828:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800182c:	4b14      	ldr	r3, [pc, #80]	@ (8001880 <HAL_RCC_OscConfig+0x3bc>)
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d0dc      	beq.n	80017f0 <HAL_RCC_OscConfig+0x32c>
 8001836:	e013      	b.n	8001860 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fa62 	bl	8000d00 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001842:	f7ff fa5d 	bl	8000d00 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_RCC_OscConfig+0x3c0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e010      	b.n	8001878 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_RCC_OscConfig+0x3bc>)
 8001858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185a:	2202      	movs	r2, #2
 800185c:	4013      	ands	r3, r2
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001860:	230f      	movs	r3, #15
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d105      	bne.n	8001876 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_RCC_OscConfig+0x3bc>)
 800186c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800186e:	4b04      	ldr	r3, [pc, #16]	@ (8001880 <HAL_RCC_OscConfig+0x3bc>)
 8001870:	4905      	ldr	r1, [pc, #20]	@ (8001888 <HAL_RCC_OscConfig+0x3c4>)
 8001872:	400a      	ands	r2, r1
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	00001388 	.word	0x00001388
 8001888:	efffffff 	.word	0xefffffff

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0e9      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018a0:	4b76      	ldr	r3, [pc, #472]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2207      	movs	r2, #7
 80018a6:	4013      	ands	r3, r2
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d91e      	bls.n	80018ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ae:	4b73      	ldr	r3, [pc, #460]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2207      	movs	r2, #7
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018c0:	f7ff fa1e 	bl	8000d00 <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c8:	e009      	b.n	80018de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80018ca:	f7ff fa19 	bl	8000d00 <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <HAL_RCC_ClockConfig+0x1f4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e0ca      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018de:	4b67      	ldr	r3, [pc, #412]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2207      	movs	r2, #7
 80018e4:	4013      	ands	r3, r2
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d1ee      	bne.n	80018ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d017      	beq.n	8001926 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2204      	movs	r2, #4
 80018fc:	4013      	ands	r3, r2
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001900:	4b60      	ldr	r3, [pc, #384]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a60      	ldr	r2, [pc, #384]	@ (8001a88 <HAL_RCC_ClockConfig+0x1fc>)
 8001906:	401a      	ands	r2, r3
 8001908:	4b5e      	ldr	r3, [pc, #376]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	21b0      	movs	r1, #176	@ 0xb0
 800190c:	0109      	lsls	r1, r1, #4
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001912:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	4a5d      	ldr	r2, [pc, #372]	@ (8001a8c <HAL_RCC_ClockConfig+0x200>)
 8001918:	4013      	ands	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68da      	ldr	r2, [r3, #12]
 8001920:	4b58      	ldr	r3, [pc, #352]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	430a      	orrs	r2, r1
 8001924:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d055      	beq.n	80019dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001930:	4b54      	ldr	r3, [pc, #336]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	221c      	movs	r2, #28
 8001936:	4393      	bics	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d107      	bne.n	800195c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	029b      	lsls	r3, r3, #10
 8001954:	4013      	ands	r3, r2
 8001956:	d11f      	bne.n	8001998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e08b      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001964:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4013      	ands	r3, r2
 800196e:	d113      	bne.n	8001998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e07f      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d106      	bne.n	800198a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800197c:	4b41      	ldr	r3, [pc, #260]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 800197e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001980:	2202      	movs	r2, #2
 8001982:	4013      	ands	r3, r2
 8001984:	d108      	bne.n	8001998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e074      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800198a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e06d      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001998:	4b3a      	ldr	r3, [pc, #232]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2207      	movs	r2, #7
 800199e:	4393      	bics	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ac:	f7ff f9a8 	bl	8000d00 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b4:	e009      	b.n	80019ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80019b6:	f7ff f9a3 	bl	8000d00 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a80 <HAL_RCC_ClockConfig+0x1f4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e054      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2238      	movs	r2, #56	@ 0x38
 80019d0:	401a      	ands	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	429a      	cmp	r2, r3
 80019da:	d1ec      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019dc:	4b27      	ldr	r3, [pc, #156]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2207      	movs	r2, #7
 80019e2:	4013      	ands	r3, r2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d21e      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2207      	movs	r2, #7
 80019f0:	4393      	bics	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	4b21      	ldr	r3, [pc, #132]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019fc:	f7ff f980 	bl	8000d00 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a06:	f7ff f97b 	bl	8000d00 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <HAL_RCC_ClockConfig+0x1f4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e02c      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2207      	movs	r2, #7
 8001a20:	4013      	ands	r3, r2
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2204      	movs	r2, #4
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	4a16      	ldr	r2, [pc, #88]	@ (8001a90 <HAL_RCC_ClockConfig+0x204>)
 8001a38:	4013      	ands	r3, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001a46:	f000 f82b 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a4a:	0001      	movs	r1, r0
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a84 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	220f      	movs	r2, #15
 8001a54:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <HAL_RCC_ClockConfig+0x208>)
 8001a58:	0092      	lsls	r2, r2, #2
 8001a5a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a5c:	221f      	movs	r2, #31
 8001a5e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001a60:	000a      	movs	r2, r1
 8001a62:	40da      	lsrs	r2, r3
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <HAL_RCC_ClockConfig+0x20c>)
 8001a66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_RCC_ClockConfig+0x210>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff f8eb 	bl	8000c48 <HAL_InitTick>
 8001a72:	0003      	movs	r3, r0
}
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b004      	add	sp, #16
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40022000 	.word	0x40022000
 8001a80:	00001388 	.word	0x00001388
 8001a84:	40021000 	.word	0x40021000
 8001a88:	ffff84ff 	.word	0xffff84ff
 8001a8c:	fffff0ff 	.word	0xfffff0ff
 8001a90:	ffff8fff 	.word	0xffff8fff
 8001a94:	08002ff8 	.word	0x08002ff8
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	2000001c 	.word	0x2000001c

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001aa6:	4b23      	ldr	r3, [pc, #140]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2238      	movs	r2, #56	@ 0x38
 8001aba:	4013      	ands	r3, r2
 8001abc:	d10f      	bne.n	8001ade <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2201      	movs	r2, #1
 8001aca:	409a      	lsls	r2, r3
 8001acc:	0013      	movs	r3, r2
 8001ace:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4819      	ldr	r0, [pc, #100]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad4:	f7fe fb18 	bl	8000108 <__udivsi3>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e01e      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ade:	4b15      	ldr	r3, [pc, #84]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2238      	movs	r2, #56	@ 0x38
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aea:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2238      	movs	r2, #56	@ 0x38
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d103      	bne.n	8001b04 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2238      	movs	r2, #56	@ 0x38
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b18      	cmp	r3, #24
 8001b0e:	d103      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b10:	23fa      	movs	r3, #250	@ 0xfa
 8001b12:	01db      	lsls	r3, r3, #7
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	e001      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7fe faf2 	bl	8000108 <__udivsi3>
 8001b24:	0003      	movs	r3, r0
 8001b26:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001b28:	68fb      	ldr	r3, [r7, #12]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b004      	add	sp, #16
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	46c0      	nop			@ (mov r8, r8)
 8001b34:	40021000 	.word	0x40021000
 8001b38:	02dc6c00 	.word	0x02dc6c00
 8001b3c:	007a1200 	.word	0x007a1200

08001b40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b44:	f7ff ffac 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001b48:	0001      	movs	r1, r0
 8001b4a:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_GetHCLKFreq+0x30>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	220f      	movs	r2, #15
 8001b52:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b54:	4b07      	ldr	r3, [pc, #28]	@ (8001b74 <HAL_RCC_GetHCLKFreq+0x34>)
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b5a:	221f      	movs	r2, #31
 8001b5c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001b5e:	000a      	movs	r2, r1
 8001b60:	40da      	lsrs	r2, r3
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetHCLKFreq+0x38>)
 8001b64:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <HAL_RCC_GetHCLKFreq+0x38>)
 8001b68:	681b      	ldr	r3, [r3, #0]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000
 8001b74:	08002ff8 	.word	0x08002ff8
 8001b78:	20000000 	.word	0x20000000

08001b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001b80:	f7ff ffde 	bl	8001b40 <HAL_RCC_GetHCLKFreq>
 8001b84:	0001      	movs	r1, r0
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0b1b      	lsrs	r3, r3, #12
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	401a      	ands	r2, r3
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	58d3      	ldr	r3, [r2, r3]
 8001b96:	221f      	movs	r2, #31
 8001b98:	4013      	ands	r3, r2
 8001b9a:	40d9      	lsrs	r1, r3
 8001b9c:	000b      	movs	r3, r1
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	08003038 	.word	0x08003038

08001bac <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001bb4:	2313      	movs	r3, #19
 8001bb6:	18fb      	adds	r3, r7, r3
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2240      	movs	r2, #64	@ 0x40
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d100      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001bce:	e079      	b.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd0:	2011      	movs	r0, #17
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	055b      	lsls	r3, r3, #21
 8001be0:	4013      	ands	r3, r2
 8001be2:	d110      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	4b67      	ldr	r3, [pc, #412]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001be6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bea:	2180      	movs	r1, #128	@ 0x80
 8001bec:	0549      	lsls	r1, r1, #21
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bf2:	4b64      	ldr	r3, [pc, #400]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf6:	2380      	movs	r3, #128	@ 0x80
 8001bf8:	055b      	lsls	r3, r3, #21
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c00:	183b      	adds	r3, r7, r0
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001c06:	4b5f      	ldr	r3, [pc, #380]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c0a:	23c0      	movs	r3, #192	@ 0xc0
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d019      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d014      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001c22:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	4a58      	ldr	r2, [pc, #352]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c2c:	4b55      	ldr	r3, [pc, #340]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c2e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c30:	4b54      	ldr	r3, [pc, #336]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0249      	lsls	r1, r1, #9
 8001c36:	430a      	orrs	r2, r1
 8001c38:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c3a:	4b52      	ldr	r3, [pc, #328]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c3e:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c40:	4952      	ldr	r1, [pc, #328]	@ (8001d8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001c46:	4b4f      	ldr	r3, [pc, #316]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4013      	ands	r3, r2
 8001c52:	d016      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f854 	bl	8000d00 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c5c:	e00c      	b.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f84f 	bl	8000d00 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d904      	bls.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001c6e:	2313      	movs	r3, #19
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	2203      	movs	r2, #3
 8001c74:	701a      	strb	r2, [r3, #0]
          break;
 8001c76:	e004      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c78:	4b42      	ldr	r3, [pc, #264]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d0ed      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001c82:	2313      	movs	r3, #19
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	0019      	movs	r1, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ca0:	e005      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2213      	movs	r2, #19
 8001ca8:	18ba      	adds	r2, r7, r2
 8001caa:	7812      	ldrb	r2, [r2, #0]
 8001cac:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cae:	2311      	movs	r3, #17
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb8:	4b32      	ldr	r3, [pc, #200]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cbc:	4b31      	ldr	r3, [pc, #196]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cbe:	4935      	ldr	r1, [pc, #212]	@ (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d009      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cce:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d009      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cec:	4b25      	ldr	r3, [pc, #148]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	4a29      	ldr	r2, [pc, #164]	@ (8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2220      	movs	r2, #32
 8001d06:	4013      	ands	r3, r2
 8001d08:	d008      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	0899      	lsrs	r1, r3, #2
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699a      	ldr	r2, [r3, #24]
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#endif /* USB_DRD_FS */
#if defined (FDCAN1)
  /*-------------------------- FDCAN1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == RCC_PERIPHCLK_FDCAN1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	4013      	ands	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCAN1CLKSOURCE(PeriphClkInit->Fdcan1ClockSelection));

    /* Configure the FDCAN1 clock source */
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2a:	4a17      	ldr	r2, [pc, #92]	@ (8001d88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	0019      	movs	r1, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d36:	430a      	orrs	r2, r1
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2204      	movs	r2, #4
 8001d40:	4013      	ands	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d009      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001d62:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	22e0      	movs	r2, #224	@ 0xe0
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001d76:	2312      	movs	r3, #18
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	781b      	ldrb	r3, [r3, #0]
}
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b006      	add	sp, #24
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	fffffcff 	.word	0xfffffcff
 8001d8c:	fffeffff 	.word	0xfffeffff
 8001d90:	00001388 	.word	0x00001388
 8001d94:	efffffff 	.word	0xefffffff
 8001d98:	ffffcfff 	.word	0xffffcfff
 8001d9c:	ffff3fff 	.word	0xffff3fff

08001da0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e046      	b.n	8001e40 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2288      	movs	r2, #136	@ 0x88
 8001db6:	589b      	ldr	r3, [r3, r2]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d107      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2284      	movs	r2, #132	@ 0x84
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	f7fe fc82 	bl	80006d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2288      	movs	r2, #136	@ 0x88
 8001dd0:	2124      	movs	r1, #36	@ 0x24
 8001dd2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2101      	movs	r1, #1
 8001de0:	438a      	bics	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f000 fd24 	bl	800283c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 fb8a 	bl	8002510 <UART_SetConfig>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e01c      	b.n	8001e40 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	490d      	ldr	r1, [pc, #52]	@ (8001e48 <HAL_UART_Init+0xa8>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	212a      	movs	r1, #42	@ 0x2a
 8001e22:	438a      	bics	r2, r1
 8001e24:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fdb3 	bl	80029a4 <UART_CheckIdleState>
 8001e3e:	0003      	movs	r3, r0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	ffffb7ff 	.word	0xffffb7ff

08001e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b0aa      	sub	sp, #168	@ 0xa8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	22a4      	movs	r2, #164	@ 0xa4
 8001e5c:	18b9      	adds	r1, r7, r2
 8001e5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	20a0      	movs	r0, #160	@ 0xa0
 8001e68:	1839      	adds	r1, r7, r0
 8001e6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	249c      	movs	r4, #156	@ 0x9c
 8001e74:	1939      	adds	r1, r7, r4
 8001e76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e78:	0011      	movs	r1, r2
 8001e7a:	18bb      	adds	r3, r7, r2
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4aa2      	ldr	r2, [pc, #648]	@ (8002108 <HAL_UART_IRQHandler+0x2bc>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	2298      	movs	r2, #152	@ 0x98
 8001e84:	18bd      	adds	r5, r7, r2
 8001e86:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001e88:	18bb      	adds	r3, r7, r2
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11a      	bne.n	8001ec6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2220      	movs	r2, #32
 8001e96:	4013      	ands	r3, r2
 8001e98:	d015      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d105      	bne.n	8001eb0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	055b      	lsls	r3, r3, #21
 8001eac:	4013      	ands	r3, r2
 8001eae:	d00a      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d100      	bne.n	8001eba <HAL_UART_IRQHandler+0x6e>
 8001eb8:	e2fb      	b.n	80024b2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	4798      	blx	r3
      }
      return;
 8001ec4:	e2f5      	b.n	80024b2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ec6:	2398      	movs	r3, #152	@ 0x98
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d100      	bne.n	8001ed2 <HAL_UART_IRQHandler+0x86>
 8001ed0:	e122      	b.n	8002118 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001ed2:	239c      	movs	r3, #156	@ 0x9c
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a8c      	ldr	r2, [pc, #560]	@ (800210c <HAL_UART_IRQHandler+0x2c0>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	d106      	bne.n	8001eec <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001ede:	23a0      	movs	r3, #160	@ 0xa0
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a8a      	ldr	r2, [pc, #552]	@ (8002110 <HAL_UART_IRQHandler+0x2c4>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d100      	bne.n	8001eec <HAL_UART_IRQHandler+0xa0>
 8001eea:	e115      	b.n	8002118 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001eec:	23a4      	movs	r3, #164	@ 0xa4
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d012      	beq.n	8001f1e <HAL_UART_IRQHandler+0xd2>
 8001ef8:	23a0      	movs	r3, #160	@ 0xa0
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	@ 0x80
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	4013      	ands	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2290      	movs	r2, #144	@ 0x90
 8001f12:	589b      	ldr	r3, [r3, r2]
 8001f14:	2201      	movs	r2, #1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2190      	movs	r1, #144	@ 0x90
 8001f1c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f1e:	23a4      	movs	r3, #164	@ 0xa4
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2202      	movs	r2, #2
 8001f26:	4013      	ands	r3, r2
 8001f28:	d011      	beq.n	8001f4e <HAL_UART_IRQHandler+0x102>
 8001f2a:	239c      	movs	r3, #156	@ 0x9c
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	d00b      	beq.n	8001f4e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2290      	movs	r2, #144	@ 0x90
 8001f42:	589b      	ldr	r3, [r3, r2]
 8001f44:	2204      	movs	r2, #4
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2190      	movs	r1, #144	@ 0x90
 8001f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f4e:	23a4      	movs	r3, #164	@ 0xa4
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d011      	beq.n	8001f7e <HAL_UART_IRQHandler+0x132>
 8001f5a:	239c      	movs	r3, #156	@ 0x9c
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	d00b      	beq.n	8001f7e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2290      	movs	r2, #144	@ 0x90
 8001f72:	589b      	ldr	r3, [r3, r2]
 8001f74:	2202      	movs	r2, #2
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2190      	movs	r1, #144	@ 0x90
 8001f7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f7e:	23a4      	movs	r3, #164	@ 0xa4
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2208      	movs	r2, #8
 8001f86:	4013      	ands	r3, r2
 8001f88:	d017      	beq.n	8001fba <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001f8a:	23a0      	movs	r3, #160	@ 0xa0
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2220      	movs	r2, #32
 8001f92:	4013      	ands	r3, r2
 8001f94:	d105      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001f96:	239c      	movs	r3, #156	@ 0x9c
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5b      	ldr	r2, [pc, #364]	@ (800210c <HAL_UART_IRQHandler+0x2c0>)
 8001f9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001fa0:	d00b      	beq.n	8001fba <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2290      	movs	r2, #144	@ 0x90
 8001fae:	589b      	ldr	r3, [r3, r2]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2190      	movs	r1, #144	@ 0x90
 8001fb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fba:	23a4      	movs	r3, #164	@ 0xa4
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x1a4>
 8001fc8:	23a0      	movs	r3, #160	@ 0xa0
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	04db      	lsls	r3, r3, #19
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2280      	movs	r2, #128	@ 0x80
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2290      	movs	r2, #144	@ 0x90
 8001fe4:	589b      	ldr	r3, [r3, r2]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2190      	movs	r1, #144	@ 0x90
 8001fee:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2290      	movs	r2, #144	@ 0x90
 8001ff4:	589b      	ldr	r3, [r3, r2]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d100      	bne.n	8001ffc <HAL_UART_IRQHandler+0x1b0>
 8001ffa:	e25c      	b.n	80024b6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001ffc:	23a4      	movs	r3, #164	@ 0xa4
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	4013      	ands	r3, r2
 8002006:	d015      	beq.n	8002034 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002008:	23a0      	movs	r3, #160	@ 0xa0
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	4013      	ands	r3, r2
 8002012:	d106      	bne.n	8002022 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002014:	239c      	movs	r3, #156	@ 0x9c
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	2380      	movs	r3, #128	@ 0x80
 800201c:	055b      	lsls	r3, r3, #21
 800201e:	4013      	ands	r3, r2
 8002020:	d008      	beq.n	8002034 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002026:	2b00      	cmp	r3, #0
 8002028:	d004      	beq.n	8002034 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	0010      	movs	r0, r2
 8002032:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2290      	movs	r2, #144	@ 0x90
 8002038:	589b      	ldr	r3, [r3, r2]
 800203a:	2194      	movs	r1, #148	@ 0x94
 800203c:	187a      	adds	r2, r7, r1
 800203e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2240      	movs	r2, #64	@ 0x40
 8002048:	4013      	ands	r3, r2
 800204a:	2b40      	cmp	r3, #64	@ 0x40
 800204c:	d004      	beq.n	8002058 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800204e:	187b      	adds	r3, r7, r1
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2228      	movs	r2, #40	@ 0x28
 8002054:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002056:	d04c      	beq.n	80020f2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 fdbc 	bl	8002bd8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2240      	movs	r2, #64	@ 0x40
 8002068:	4013      	ands	r3, r2
 800206a:	2b40      	cmp	r3, #64	@ 0x40
 800206c:	d13c      	bne.n	80020e8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800206e:	f3ef 8310 	mrs	r3, PRIMASK
 8002072:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002076:	2090      	movs	r0, #144	@ 0x90
 8002078:	183a      	adds	r2, r7, r0
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	2301      	movs	r3, #1
 800207e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002082:	f383 8810 	msr	PRIMASK, r3
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2140      	movs	r1, #64	@ 0x40
 8002094:	438a      	bics	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	183b      	adds	r3, r7, r0
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a0:	f383 8810 	msr	PRIMASK, r3
}
 80020a4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2280      	movs	r2, #128	@ 0x80
 80020aa:	589b      	ldr	r3, [r3, r2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d016      	beq.n	80020de <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	589b      	ldr	r3, [r3, r2]
 80020b6:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_UART_IRQHandler+0x2c8>)
 80020b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2280      	movs	r2, #128	@ 0x80
 80020be:	589b      	ldr	r3, [r3, r2]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe ff67 	bl	8000f94 <HAL_DMA_Abort_IT>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d01c      	beq.n	8002104 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	589b      	ldr	r3, [r3, r2]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	2180      	movs	r1, #128	@ 0x80
 80020d6:	5852      	ldr	r2, [r2, r1]
 80020d8:	0010      	movs	r0, r2
 80020da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020dc:	e012      	b.n	8002104 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 fa01 	bl	80024e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e6:	e00d      	b.n	8002104 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 f9fc 	bl	80024e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	e008      	b.n	8002104 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f9f7 	bl	80024e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2290      	movs	r2, #144	@ 0x90
 80020fe:	2100      	movs	r1, #0
 8002100:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002102:	e1d8      	b.n	80024b6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002104:	46c0      	nop			@ (mov r8, r8)
    return;
 8002106:	e1d6      	b.n	80024b6 <HAL_UART_IRQHandler+0x66a>
 8002108:	0000080f 	.word	0x0000080f
 800210c:	10000001 	.word	0x10000001
 8002110:	04000120 	.word	0x04000120
 8002114:	08002ca5 	.word	0x08002ca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d000      	beq.n	8002122 <HAL_UART_IRQHandler+0x2d6>
 8002120:	e15d      	b.n	80023de <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002122:	23a4      	movs	r3, #164	@ 0xa4
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2210      	movs	r2, #16
 800212a:	4013      	ands	r3, r2
 800212c:	d100      	bne.n	8002130 <HAL_UART_IRQHandler+0x2e4>
 800212e:	e156      	b.n	80023de <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002130:	23a0      	movs	r3, #160	@ 0xa0
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2210      	movs	r2, #16
 8002138:	4013      	ands	r3, r2
 800213a:	d100      	bne.n	800213e <HAL_UART_IRQHandler+0x2f2>
 800213c:	e14f      	b.n	80023de <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2210      	movs	r2, #16
 8002144:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2240      	movs	r2, #64	@ 0x40
 800214e:	4013      	ands	r3, r2
 8002150:	2b40      	cmp	r3, #64	@ 0x40
 8002152:	d000      	beq.n	8002156 <HAL_UART_IRQHandler+0x30a>
 8002154:	e0c3      	b.n	80022de <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	589b      	ldr	r3, [r3, r2]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	217e      	movs	r1, #126	@ 0x7e
 8002162:	187b      	adds	r3, r7, r1
 8002164:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002166:	187b      	adds	r3, r7, r1
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d100      	bne.n	8002170 <HAL_UART_IRQHandler+0x324>
 800216e:	e097      	b.n	80022a0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	225c      	movs	r2, #92	@ 0x5c
 8002174:	5a9b      	ldrh	r3, [r3, r2]
 8002176:	187a      	adds	r2, r7, r1
 8002178:	8812      	ldrh	r2, [r2, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d300      	bcc.n	8002180 <HAL_UART_IRQHandler+0x334>
 800217e:	e08f      	b.n	80022a0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	187a      	adds	r2, r7, r1
 8002184:	215e      	movs	r1, #94	@ 0x5e
 8002186:	8812      	ldrh	r2, [r2, #0]
 8002188:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2280      	movs	r2, #128	@ 0x80
 800218e:	589b      	ldr	r3, [r3, r2]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2220      	movs	r2, #32
 8002196:	4013      	ands	r3, r2
 8002198:	d170      	bne.n	800227c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800219a:	f3ef 8310 	mrs	r3, PRIMASK
 800219e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80021a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021a4:	2301      	movs	r3, #1
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021aa:	f383 8810 	msr	PRIMASK, r3
}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	49c4      	ldr	r1, [pc, #784]	@ (80024cc <HAL_UART_IRQHandler+0x680>)
 80021bc:	400a      	ands	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c6:	f383 8810 	msr	PRIMASK, r3
}
 80021ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021cc:	f3ef 8310 	mrs	r3, PRIMASK
 80021d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80021d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80021d6:	2301      	movs	r3, #1
 80021d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021dc:	f383 8810 	msr	PRIMASK, r3
}
 80021e0:	46c0      	nop			@ (mov r8, r8)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	438a      	bics	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002202:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002206:	673b      	str	r3, [r7, #112]	@ 0x70
 8002208:	2301      	movs	r3, #1
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800220c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800220e:	f383 8810 	msr	PRIMASK, r3
}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	@ 0x40
 8002220:	438a      	bics	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002226:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222a:	f383 8810 	msr	PRIMASK, r3
}
 800222e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	228c      	movs	r2, #140	@ 0x8c
 8002234:	2120      	movs	r1, #32
 8002236:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800223e:	f3ef 8310 	mrs	r3, PRIMASK
 8002242:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002246:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002248:	2301      	movs	r3, #1
 800224a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800224e:	f383 8810 	msr	PRIMASK, r3
}
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2110      	movs	r1, #16
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002266:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800226a:	f383 8810 	msr	PRIMASK, r3
}
 800226e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2280      	movs	r2, #128	@ 0x80
 8002274:	589b      	ldr	r3, [r3, r2]
 8002276:	0018      	movs	r0, r3
 8002278:	f7fe fe2a 	bl	8000ed0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	225c      	movs	r2, #92	@ 0x5c
 8002286:	5a9a      	ldrh	r2, [r3, r2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	215e      	movs	r1, #94	@ 0x5e
 800228c:	5a5b      	ldrh	r3, [r3, r1]
 800228e:	b29b      	uxth	r3, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0011      	movs	r1, r2
 8002298:	0018      	movs	r0, r3
 800229a:	f000 f92d 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800229e:	e10c      	b.n	80024ba <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	225c      	movs	r2, #92	@ 0x5c
 80022a4:	5a9b      	ldrh	r3, [r3, r2]
 80022a6:	227e      	movs	r2, #126	@ 0x7e
 80022a8:	18ba      	adds	r2, r7, r2
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d000      	beq.n	80022b2 <HAL_UART_IRQHandler+0x466>
 80022b0:	e103      	b.n	80024ba <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	589b      	ldr	r3, [r3, r2]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	4013      	ands	r3, r2
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d000      	beq.n	80022c6 <HAL_UART_IRQHandler+0x47a>
 80022c4:	e0f9      	b.n	80024ba <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	225c      	movs	r2, #92	@ 0x5c
 80022d0:	5a9a      	ldrh	r2, [r3, r2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f90e 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
      return;
 80022dc:	e0ed      	b.n	80024ba <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	225c      	movs	r2, #92	@ 0x5c
 80022e2:	5a99      	ldrh	r1, [r3, r2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	225e      	movs	r2, #94	@ 0x5e
 80022e8:	5a9b      	ldrh	r3, [r3, r2]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	208e      	movs	r0, #142	@ 0x8e
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	1a8a      	subs	r2, r1, r2
 80022f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	225e      	movs	r2, #94	@ 0x5e
 80022f8:	5a9b      	ldrh	r3, [r3, r2]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d100      	bne.n	8002302 <HAL_UART_IRQHandler+0x4b6>
 8002300:	e0dd      	b.n	80024be <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002302:	183b      	adds	r3, r7, r0
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d100      	bne.n	800230c <HAL_UART_IRQHandler+0x4c0>
 800230a:	e0d8      	b.n	80024be <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800230c:	f3ef 8310 	mrs	r3, PRIMASK
 8002310:	60fb      	str	r3, [r7, #12]
  return(result);
 8002312:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002314:	2488      	movs	r4, #136	@ 0x88
 8002316:	193a      	adds	r2, r7, r4
 8002318:	6013      	str	r3, [r2, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	f383 8810 	msr	PRIMASK, r3
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4967      	ldr	r1, [pc, #412]	@ (80024d0 <HAL_UART_IRQHandler+0x684>)
 8002332:	400a      	ands	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	193b      	adds	r3, r7, r4
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f383 8810 	msr	PRIMASK, r3
}
 8002342:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002344:	f3ef 8310 	mrs	r3, PRIMASK
 8002348:	61bb      	str	r3, [r7, #24]
  return(result);
 800234a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800234c:	2484      	movs	r4, #132	@ 0x84
 800234e:	193a      	adds	r2, r7, r4
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f383 8810 	msr	PRIMASK, r3
}
 800235c:	46c0      	nop			@ (mov r8, r8)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	495a      	ldr	r1, [pc, #360]	@ (80024d4 <HAL_UART_IRQHandler+0x688>)
 800236a:	400a      	ands	r2, r1
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	193b      	adds	r3, r7, r4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	f383 8810 	msr	PRIMASK, r3
}
 800237a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	228c      	movs	r2, #140	@ 0x8c
 8002380:	2120      	movs	r1, #32
 8002382:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002390:	f3ef 8310 	mrs	r3, PRIMASK
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002398:	2480      	movs	r4, #128	@ 0x80
 800239a:	193a      	adds	r2, r7, r4
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	f383 8810 	msr	PRIMASK, r3
}
 80023a8:	46c0      	nop			@ (mov r8, r8)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2110      	movs	r1, #16
 80023b6:	438a      	bics	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c2:	f383 8810 	msr	PRIMASK, r3
}
 80023c6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 f88e 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023dc:	e06f      	b.n	80024be <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80023de:	23a4      	movs	r3, #164	@ 0xa4
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	035b      	lsls	r3, r3, #13
 80023e8:	4013      	ands	r3, r2
 80023ea:	d010      	beq.n	800240e <HAL_UART_IRQHandler+0x5c2>
 80023ec:	239c      	movs	r3, #156	@ 0x9c
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	03db      	lsls	r3, r3, #15
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2280      	movs	r2, #128	@ 0x80
 8002400:	0352      	lsls	r2, r2, #13
 8002402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fc8b 	bl	8002d22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800240c:	e05a      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800240e:	23a4      	movs	r3, #164	@ 0xa4
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2280      	movs	r2, #128	@ 0x80
 8002416:	4013      	ands	r3, r2
 8002418:	d016      	beq.n	8002448 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800241a:	23a0      	movs	r3, #160	@ 0xa0
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2280      	movs	r2, #128	@ 0x80
 8002422:	4013      	ands	r3, r2
 8002424:	d106      	bne.n	8002434 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002426:	239c      	movs	r3, #156	@ 0x9c
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	4013      	ands	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002438:	2b00      	cmp	r3, #0
 800243a:	d042      	beq.n	80024c2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	0010      	movs	r0, r2
 8002444:	4798      	blx	r3
    }
    return;
 8002446:	e03c      	b.n	80024c2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002448:	23a4      	movs	r3, #164	@ 0xa4
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	4013      	ands	r3, r2
 8002452:	d00a      	beq.n	800246a <HAL_UART_IRQHandler+0x61e>
 8002454:	23a0      	movs	r3, #160	@ 0xa0
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2240      	movs	r2, #64	@ 0x40
 800245c:	4013      	ands	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 fc31 	bl	8002cca <UART_EndTransmit_IT>
    return;
 8002468:	e02c      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800246a:	23a4      	movs	r3, #164	@ 0xa4
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	041b      	lsls	r3, r3, #16
 8002474:	4013      	ands	r3, r2
 8002476:	d00b      	beq.n	8002490 <HAL_UART_IRQHandler+0x644>
 8002478:	23a0      	movs	r3, #160	@ 0xa0
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	4013      	ands	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fc5a 	bl	8002d42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800248e:	e019      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002490:	23a4      	movs	r3, #164	@ 0xa4
 8002492:	18fb      	adds	r3, r7, r3
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	045b      	lsls	r3, r3, #17
 800249a:	4013      	ands	r3, r2
 800249c:	d012      	beq.n	80024c4 <HAL_UART_IRQHandler+0x678>
 800249e:	23a0      	movs	r3, #160	@ 0xa0
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da0d      	bge.n	80024c4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fc41 	bl	8002d32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024b0:	e008      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
      return;
 80024b2:	46c0      	nop			@ (mov r8, r8)
 80024b4:	e006      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
    return;
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	e004      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
      return;
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	e002      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
      return;
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	e000      	b.n	80024c4 <HAL_UART_IRQHandler+0x678>
    return;
 80024c2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b02a      	add	sp, #168	@ 0xa8
 80024c8:	bdb0      	pop	{r4, r5, r7, pc}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	fffffeff 	.word	0xfffffeff
 80024d0:	fffffedf 	.word	0xfffffedf
 80024d4:	effffffe 	.word	0xeffffffe

080024d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80024e0:	46c0      	nop			@ (mov r8, r8)
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b002      	add	sp, #8
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024f0:	46c0      	nop			@ (mov r8, r8)
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	000a      	movs	r2, r1
 8002502:	1cbb      	adds	r3, r7, #2
 8002504:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002518:	231e      	movs	r3, #30
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4ab5      	ldr	r2, [pc, #724]	@ (8002814 <UART_SetConfig+0x304>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4ab0      	ldr	r2, [pc, #704]	@ (8002818 <UART_SetConfig+0x308>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4aa7      	ldr	r2, [pc, #668]	@ (800281c <UART_SetConfig+0x30c>)
 800257e:	4013      	ands	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002592:	220f      	movs	r2, #15
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a9d      	ldr	r2, [pc, #628]	@ (8002820 <UART_SetConfig+0x310>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d127      	bne.n	80025fe <UART_SetConfig+0xee>
 80025ae:	4b9d      	ldr	r3, [pc, #628]	@ (8002824 <UART_SetConfig+0x314>)
 80025b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b2:	2203      	movs	r2, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d017      	beq.n	80025ea <UART_SetConfig+0xda>
 80025ba:	d81b      	bhi.n	80025f4 <UART_SetConfig+0xe4>
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d00a      	beq.n	80025d6 <UART_SetConfig+0xc6>
 80025c0:	d818      	bhi.n	80025f4 <UART_SetConfig+0xe4>
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <UART_SetConfig+0xbc>
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d00a      	beq.n	80025e0 <UART_SetConfig+0xd0>
 80025ca:	e013      	b.n	80025f4 <UART_SetConfig+0xe4>
 80025cc:	231f      	movs	r3, #31
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e035      	b.n	8002642 <UART_SetConfig+0x132>
 80025d6:	231f      	movs	r3, #31
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2202      	movs	r2, #2
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e030      	b.n	8002642 <UART_SetConfig+0x132>
 80025e0:	231f      	movs	r3, #31
 80025e2:	18fb      	adds	r3, r7, r3
 80025e4:	2204      	movs	r2, #4
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e02b      	b.n	8002642 <UART_SetConfig+0x132>
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2208      	movs	r2, #8
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e026      	b.n	8002642 <UART_SetConfig+0x132>
 80025f4:	231f      	movs	r3, #31
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2210      	movs	r2, #16
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e021      	b.n	8002642 <UART_SetConfig+0x132>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a89      	ldr	r2, [pc, #548]	@ (8002828 <UART_SetConfig+0x318>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <UART_SetConfig+0x102>
 8002608:	231f      	movs	r3, #31
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e017      	b.n	8002642 <UART_SetConfig+0x132>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a85      	ldr	r2, [pc, #532]	@ (800282c <UART_SetConfig+0x31c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d104      	bne.n	8002626 <UART_SetConfig+0x116>
 800261c:	231f      	movs	r3, #31
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
 8002624:	e00d      	b.n	8002642 <UART_SetConfig+0x132>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a81      	ldr	r2, [pc, #516]	@ (8002830 <UART_SetConfig+0x320>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d104      	bne.n	800263a <UART_SetConfig+0x12a>
 8002630:	231f      	movs	r3, #31
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e003      	b.n	8002642 <UART_SetConfig+0x132>
 800263a:	231f      	movs	r3, #31
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2210      	movs	r2, #16
 8002640:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	429a      	cmp	r2, r3
 800264c:	d000      	beq.n	8002650 <UART_SetConfig+0x140>
 800264e:	e06f      	b.n	8002730 <UART_SetConfig+0x220>
  {
    switch (clocksource)
 8002650:	231f      	movs	r3, #31
 8002652:	18fb      	adds	r3, r7, r3
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b08      	cmp	r3, #8
 8002658:	d01f      	beq.n	800269a <UART_SetConfig+0x18a>
 800265a:	dc22      	bgt.n	80026a2 <UART_SetConfig+0x192>
 800265c:	2b04      	cmp	r3, #4
 800265e:	d017      	beq.n	8002690 <UART_SetConfig+0x180>
 8002660:	dc1f      	bgt.n	80026a2 <UART_SetConfig+0x192>
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <UART_SetConfig+0x15c>
 8002666:	2b02      	cmp	r3, #2
 8002668:	d005      	beq.n	8002676 <UART_SetConfig+0x166>
 800266a:	e01a      	b.n	80026a2 <UART_SetConfig+0x192>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800266c:	f7ff fa86 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002670:	0003      	movs	r3, r0
 8002672:	61bb      	str	r3, [r7, #24]
        break;
 8002674:	e01c      	b.n	80026b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002676:	4b6b      	ldr	r3, [pc, #428]	@ (8002824 <UART_SetConfig+0x314>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	095b      	lsrs	r3, r3, #5
 800267c:	2207      	movs	r2, #7
 800267e:	4013      	ands	r3, r2
 8002680:	3301      	adds	r3, #1
 8002682:	0019      	movs	r1, r3
 8002684:	486b      	ldr	r0, [pc, #428]	@ (8002834 <UART_SetConfig+0x324>)
 8002686:	f7fd fd3f 	bl	8000108 <__udivsi3>
 800268a:	0003      	movs	r3, r0
 800268c:	61bb      	str	r3, [r7, #24]
        break;
 800268e:	e00f      	b.n	80026b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002690:	f7ff fa06 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8002694:	0003      	movs	r3, r0
 8002696:	61bb      	str	r3, [r7, #24]
        break;
 8002698:	e00a      	b.n	80026b0 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	61bb      	str	r3, [r7, #24]
        break;
 80026a0:	e006      	b.n	80026b0 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026a6:	231e      	movs	r3, #30
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2201      	movs	r2, #1
 80026ac:	701a      	strb	r2, [r3, #0]
        break;
 80026ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d100      	bne.n	80026b8 <UART_SetConfig+0x1a8>
 80026b6:	e097      	b.n	80027e8 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002838 <UART_SetConfig+0x328>)
 80026be:	0052      	lsls	r2, r2, #1
 80026c0:	5ad3      	ldrh	r3, [r2, r3]
 80026c2:	0019      	movs	r1, r3
 80026c4:	69b8      	ldr	r0, [r7, #24]
 80026c6:	f7fd fd1f 	bl	8000108 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	005a      	lsls	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	18d2      	adds	r2, r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f7fd fd13 	bl	8000108 <__udivsi3>
 80026e2:	0003      	movs	r3, r0
 80026e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d91c      	bls.n	8002726 <UART_SetConfig+0x216>
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	2380      	movs	r3, #128	@ 0x80
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d217      	bcs.n	8002726 <UART_SetConfig+0x216>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	200e      	movs	r0, #14
 80026fc:	183b      	adds	r3, r7, r0
 80026fe:	210f      	movs	r1, #15
 8002700:	438a      	bics	r2, r1
 8002702:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	085b      	lsrs	r3, r3, #1
 8002708:	b29b      	uxth	r3, r3
 800270a:	2207      	movs	r2, #7
 800270c:	4013      	ands	r3, r2
 800270e:	b299      	uxth	r1, r3
 8002710:	183b      	adds	r3, r7, r0
 8002712:	183a      	adds	r2, r7, r0
 8002714:	8812      	ldrh	r2, [r2, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	183a      	adds	r2, r7, r0
 8002720:	8812      	ldrh	r2, [r2, #0]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	e060      	b.n	80027e8 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002726:	231e      	movs	r3, #30
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e05b      	b.n	80027e8 <UART_SetConfig+0x2d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002730:	231f      	movs	r3, #31
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d01f      	beq.n	800277a <UART_SetConfig+0x26a>
 800273a:	dc22      	bgt.n	8002782 <UART_SetConfig+0x272>
 800273c:	2b04      	cmp	r3, #4
 800273e:	d017      	beq.n	8002770 <UART_SetConfig+0x260>
 8002740:	dc1f      	bgt.n	8002782 <UART_SetConfig+0x272>
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <UART_SetConfig+0x23c>
 8002746:	2b02      	cmp	r3, #2
 8002748:	d005      	beq.n	8002756 <UART_SetConfig+0x246>
 800274a:	e01a      	b.n	8002782 <UART_SetConfig+0x272>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800274c:	f7ff fa16 	bl	8001b7c <HAL_RCC_GetPCLK1Freq>
 8002750:	0003      	movs	r3, r0
 8002752:	61bb      	str	r3, [r7, #24]
        break;
 8002754:	e01c      	b.n	8002790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002756:	4b33      	ldr	r3, [pc, #204]	@ (8002824 <UART_SetConfig+0x314>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	2207      	movs	r2, #7
 800275e:	4013      	ands	r3, r2
 8002760:	3301      	adds	r3, #1
 8002762:	0019      	movs	r1, r3
 8002764:	4833      	ldr	r0, [pc, #204]	@ (8002834 <UART_SetConfig+0x324>)
 8002766:	f7fd fccf 	bl	8000108 <__udivsi3>
 800276a:	0003      	movs	r3, r0
 800276c:	61bb      	str	r3, [r7, #24]
        break;
 800276e:	e00f      	b.n	8002790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002770:	f7ff f996 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8002774:	0003      	movs	r3, r0
 8002776:	61bb      	str	r3, [r7, #24]
        break;
 8002778:	e00a      	b.n	8002790 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	61bb      	str	r3, [r7, #24]
        break;
 8002780:	e006      	b.n	8002790 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002786:	231e      	movs	r3, #30
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]
        break;
 800278e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d028      	beq.n	80027e8 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800279a:	4b27      	ldr	r3, [pc, #156]	@ (8002838 <UART_SetConfig+0x328>)
 800279c:	0052      	lsls	r2, r2, #1
 800279e:	5ad3      	ldrh	r3, [r2, r3]
 80027a0:	0019      	movs	r1, r3
 80027a2:	69b8      	ldr	r0, [r7, #24]
 80027a4:	f7fd fcb0 	bl	8000108 <__udivsi3>
 80027a8:	0003      	movs	r3, r0
 80027aa:	001a      	movs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	18d2      	adds	r2, r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	0019      	movs	r1, r3
 80027ba:	0010      	movs	r0, r2
 80027bc:	f7fd fca4 	bl	8000108 <__udivsi3>
 80027c0:	0003      	movs	r3, r0
 80027c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	d90a      	bls.n	80027e0 <UART_SetConfig+0x2d0>
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	025b      	lsls	r3, r3, #9
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d205      	bcs.n	80027e0 <UART_SetConfig+0x2d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	e003      	b.n	80027e8 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 80027e0:	231e      	movs	r3, #30
 80027e2:	18fb      	adds	r3, r7, r3
 80027e4:	2201      	movs	r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	226a      	movs	r2, #106	@ 0x6a
 80027ec:	2101      	movs	r1, #1
 80027ee:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2268      	movs	r2, #104	@ 0x68
 80027f4:	2101      	movs	r1, #1
 80027f6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002804:	231e      	movs	r3, #30
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b008      	add	sp, #32
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			@ (mov r8, r8)
 8002814:	cfff69f3 	.word	0xcfff69f3
 8002818:	ffffcfff 	.word	0xffffcfff
 800281c:	11fff4ff 	.word	0x11fff4ff
 8002820:	40013800 	.word	0x40013800
 8002824:	40021000 	.word	0x40021000
 8002828:	40004400 	.word	0x40004400
 800282c:	40004800 	.word	0x40004800
 8002830:	40004c00 	.word	0x40004c00
 8002834:	02dc6c00 	.word	0x02dc6c00
 8002838:	08003060 	.word	0x08003060

0800283c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002848:	2208      	movs	r2, #8
 800284a:	4013      	ands	r3, r2
 800284c:	d00b      	beq.n	8002866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <UART_AdvFeatureConfig+0x144>)
 8002856:	4013      	ands	r3, r2
 8002858:	0019      	movs	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	d00b      	beq.n	8002888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a43      	ldr	r2, [pc, #268]	@ (8002984 <UART_AdvFeatureConfig+0x148>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d00b      	beq.n	80028aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a3b      	ldr	r2, [pc, #236]	@ (8002988 <UART_AdvFeatureConfig+0x14c>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ae:	2204      	movs	r2, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d00b      	beq.n	80028cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4a34      	ldr	r2, [pc, #208]	@ (800298c <UART_AdvFeatureConfig+0x150>)
 80028bc:	4013      	ands	r3, r2
 80028be:	0019      	movs	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	2210      	movs	r2, #16
 80028d2:	4013      	ands	r3, r2
 80028d4:	d00b      	beq.n	80028ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <UART_AdvFeatureConfig+0x154>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	2220      	movs	r2, #32
 80028f4:	4013      	ands	r3, r2
 80028f6:	d00b      	beq.n	8002910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4a25      	ldr	r2, [pc, #148]	@ (8002994 <UART_AdvFeatureConfig+0x158>)
 8002900:	4013      	ands	r3, r2
 8002902:	0019      	movs	r1, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002914:	2240      	movs	r2, #64	@ 0x40
 8002916:	4013      	ands	r3, r2
 8002918:	d01d      	beq.n	8002956 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a1d      	ldr	r2, [pc, #116]	@ (8002998 <UART_AdvFeatureConfig+0x15c>)
 8002922:	4013      	ands	r3, r2
 8002924:	0019      	movs	r1, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002936:	2380      	movs	r3, #128	@ 0x80
 8002938:	035b      	lsls	r3, r3, #13
 800293a:	429a      	cmp	r2, r3
 800293c:	d10b      	bne.n	8002956 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <UART_AdvFeatureConfig+0x160>)
 8002946:	4013      	ands	r3, r2
 8002948:	0019      	movs	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295a:	2280      	movs	r2, #128	@ 0x80
 800295c:	4013      	ands	r3, r2
 800295e:	d00b      	beq.n	8002978 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4a0e      	ldr	r2, [pc, #56]	@ (80029a0 <UART_AdvFeatureConfig+0x164>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	ffff7fff 	.word	0xffff7fff
 8002984:	fffdffff 	.word	0xfffdffff
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	fffbffff 	.word	0xfffbffff
 8002990:	ffffefff 	.word	0xffffefff
 8002994:	ffffdfff 	.word	0xffffdfff
 8002998:	ffefffff 	.word	0xffefffff
 800299c:	ff9fffff 	.word	0xff9fffff
 80029a0:	fff7ffff 	.word	0xfff7ffff

080029a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b092      	sub	sp, #72	@ 0x48
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2290      	movs	r2, #144	@ 0x90
 80029b0:	2100      	movs	r1, #0
 80029b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029b4:	f7fe f9a4 	bl	8000d00 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2208      	movs	r2, #8
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d12d      	bne.n	8002a26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	0391      	lsls	r1, r2, #14
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4a47      	ldr	r2, [pc, #284]	@ (8002af0 <UART_CheckIdleState+0x14c>)
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f000 f88e 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 80029dc:	1e03      	subs	r3, r0, #0
 80029de:	d022      	beq.n	8002a26 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ea:	2301      	movs	r3, #1
 80029ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	46c0      	nop			@ (mov r8, r8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2180      	movs	r1, #128	@ 0x80
 8002a02:	438a      	bics	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a0c:	f383 8810 	msr	PRIMASK, r3
}
 8002a10:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2288      	movs	r2, #136	@ 0x88
 8002a16:	2120      	movs	r1, #32
 8002a18:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2284      	movs	r2, #132	@ 0x84
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e060      	b.n	8002ae8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4013      	ands	r3, r2
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d146      	bne.n	8002ac2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a36:	2280      	movs	r2, #128	@ 0x80
 8002a38:	03d1      	lsls	r1, r2, #15
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002af0 <UART_CheckIdleState+0x14c>)
 8002a3e:	9200      	str	r2, [sp, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f000 f859 	bl	8002af8 <UART_WaitOnFlagUntilTimeout>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d03b      	beq.n	8002ac2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a50:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f383 8810 	msr	PRIMASK, r3
}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4922      	ldr	r1, [pc, #136]	@ (8002af4 <UART_CheckIdleState+0x150>)
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f383 8810 	msr	PRIMASK, r3
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a80:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a82:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a84:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a86:	2301      	movs	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f383 8810 	msr	PRIMASK, r3
}
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	228c      	movs	r2, #140	@ 0x8c
 8002ab2:	2120      	movs	r1, #32
 8002ab4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2284      	movs	r2, #132	@ 0x84
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e012      	b.n	8002ae8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2288      	movs	r2, #136	@ 0x88
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	228c      	movs	r2, #140	@ 0x8c
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2284      	movs	r2, #132	@ 0x84
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b010      	add	sp, #64	@ 0x40
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	01ffffff 	.word	0x01ffffff
 8002af4:	fffffedf 	.word	0xfffffedf

08002af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	1dfb      	adds	r3, r7, #7
 8002b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b08:	e051      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d04e      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b10:	f7fe f8f6 	bl	8000d00 <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d302      	bcc.n	8002b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e051      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2204      	movs	r2, #4
 8002b32:	4013      	ands	r3, r2
 8002b34:	d03b      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b80      	cmp	r3, #128	@ 0x80
 8002b3a:	d038      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b40      	cmp	r3, #64	@ 0x40
 8002b40:	d035      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d111      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2208      	movs	r2, #8
 8002b56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 f83c 	bl	8002bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2290      	movs	r2, #144	@ 0x90
 8002b64:	2108      	movs	r1, #8
 8002b66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2284      	movs	r2, #132	@ 0x84
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e02c      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	401a      	ands	r2, r3
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d112      	bne.n	8002bae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0112      	lsls	r2, r2, #4
 8002b90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f81f 	bl	8002bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2290      	movs	r2, #144	@ 0x90
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2284      	movs	r2, #132	@ 0x84
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e00f      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	425a      	negs	r2, r3
 8002bbe:	4153      	adcs	r3, r2
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	001a      	movs	r2, r3
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d09e      	beq.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	@ 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002be0:	f3ef 8310 	mrs	r3, PRIMASK
 8002be4:	617b      	str	r3, [r7, #20]
  return(result);
 8002be6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bea:	2301      	movs	r3, #1
 8002bec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f383 8810 	msr	PRIMASK, r3
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4926      	ldr	r1, [pc, #152]	@ (8002c9c <UART_EndRxTransfer+0xc4>)
 8002c02:	400a      	ands	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f383 8810 	msr	PRIMASK, r3
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c12:	f3ef 8310 	mrs	r3, PRIMASK
 8002c16:	623b      	str	r3, [r7, #32]
  return(result);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f383 8810 	msr	PRIMASK, r3
}
 8002c26:	46c0      	nop			@ (mov r8, r8)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	491b      	ldr	r1, [pc, #108]	@ (8002ca0 <UART_EndRxTransfer+0xc8>)
 8002c34:	400a      	ands	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d118      	bne.n	8002c7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c50:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2110      	movs	r1, #16
 8002c6e:	438a      	bics	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f383 8810 	msr	PRIMASK, r3
}
 8002c7c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	228c      	movs	r2, #140	@ 0x8c
 8002c82:	2120      	movs	r1, #32
 8002c84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c92:	46c0      	nop			@ (mov r8, r8)
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b00e      	add	sp, #56	@ 0x38
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	fffffedf 	.word	0xfffffedf
 8002ca0:	effffffe 	.word	0xeffffffe

08002ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	225e      	movs	r2, #94	@ 0x5e
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fc13 	bl	80024e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc2:	46c0      	nop			@ (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f383 8810 	msr	PRIMASK, r3
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2140      	movs	r1, #64	@ 0x40
 8002cf4:	438a      	bics	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f383 8810 	msr	PRIMASK, r3
}
 8002d02:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2288      	movs	r2, #136	@ 0x88
 8002d08:	2120      	movs	r1, #32
 8002d0a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fbdf 	bl	80024d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b006      	add	sp, #24
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b002      	add	sp, #8
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2284      	movs	r2, #132	@ 0x84
 8002d60:	5c9b      	ldrb	r3, [r3, r2]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_UARTEx_DisableFifoMode+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e027      	b.n	8002dba <HAL_UARTEx_DisableFifoMode+0x66>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2284      	movs	r2, #132	@ 0x84
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2288      	movs	r2, #136	@ 0x88
 8002d76:	2124      	movs	r1, #36	@ 0x24
 8002d78:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2288      	movs	r2, #136	@ 0x88
 8002dac:	2120      	movs	r1, #32
 8002dae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2284      	movs	r2, #132	@ 0x84
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b004      	add	sp, #16
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	dfffffff 	.word	0xdfffffff

08002dc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2284      	movs	r2, #132	@ 0x84
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e02e      	b.n	8002e3e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2284      	movs	r2, #132	@ 0x84
 8002de4:	2101      	movs	r1, #1
 8002de6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2288      	movs	r2, #136	@ 0x88
 8002dec:	2124      	movs	r1, #36	@ 0x24
 8002dee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	08d9      	lsrs	r1, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 f854 	bl	8002ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2288      	movs	r2, #136	@ 0x88
 8002e30:	2120      	movs	r1, #32
 8002e32:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2284      	movs	r2, #132	@ 0x84
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b004      	add	sp, #16
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2284      	movs	r2, #132	@ 0x84
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e02f      	b.n	8002ec0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2284      	movs	r2, #132	@ 0x84
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2288      	movs	r2, #136	@ 0x88
 8002e6c:	2124      	movs	r1, #36	@ 0x24
 8002e6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	438a      	bics	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ec8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	0019      	movs	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f000 f813 	bl	8002ecc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2288      	movs	r2, #136	@ 0x88
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2284      	movs	r2, #132	@ 0x84
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b004      	add	sp, #16
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	f1ffffff 	.word	0xf1ffffff

08002ecc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	226a      	movs	r2, #106	@ 0x6a
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2268      	movs	r2, #104	@ 0x68
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002eec:	e043      	b.n	8002f76 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002eee:	260f      	movs	r6, #15
 8002ef0:	19bb      	adds	r3, r7, r6
 8002ef2:	2208      	movs	r2, #8
 8002ef4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002ef6:	200e      	movs	r0, #14
 8002ef8:	183b      	adds	r3, r7, r0
 8002efa:	2208      	movs	r2, #8
 8002efc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	0e5b      	lsrs	r3, r3, #25
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	240d      	movs	r4, #13
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2107      	movs	r1, #7
 8002f0e:	400a      	ands	r2, r1
 8002f10:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	0f5b      	lsrs	r3, r3, #29
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	250c      	movs	r5, #12
 8002f1e:	197b      	adds	r3, r7, r5
 8002f20:	2107      	movs	r1, #7
 8002f22:	400a      	ands	r2, r1
 8002f24:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f26:	183b      	adds	r3, r7, r0
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	197a      	adds	r2, r7, r5
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	4914      	ldr	r1, [pc, #80]	@ (8002f80 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f30:	5c8a      	ldrb	r2, [r1, r2]
 8002f32:	435a      	muls	r2, r3
 8002f34:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002f36:	197b      	adds	r3, r7, r5
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	@ (8002f84 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002f3e:	0019      	movs	r1, r3
 8002f40:	f7fd f96c 	bl	800021c <__divsi3>
 8002f44:	0003      	movs	r3, r0
 8002f46:	b299      	uxth	r1, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	226a      	movs	r2, #106	@ 0x6a
 8002f4c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f4e:	19bb      	adds	r3, r7, r6
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	193a      	adds	r2, r7, r4
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	490a      	ldr	r1, [pc, #40]	@ (8002f80 <UARTEx_SetNbDataToProcess+0xb4>)
 8002f58:	5c8a      	ldrb	r2, [r1, r2]
 8002f5a:	435a      	muls	r2, r3
 8002f5c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f5e:	193b      	adds	r3, r7, r4
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <UARTEx_SetNbDataToProcess+0xb8>)
 8002f64:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f66:	0019      	movs	r1, r3
 8002f68:	f7fd f958 	bl	800021c <__divsi3>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	b299      	uxth	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2268      	movs	r2, #104	@ 0x68
 8002f74:	5299      	strh	r1, [r3, r2]
}
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b005      	add	sp, #20
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7e:	46c0      	nop			@ (mov r8, r8)
 8002f80:	08003078 	.word	0x08003078
 8002f84:	08003080 	.word	0x08003080

08002f88 <memset>:
 8002f88:	0003      	movs	r3, r0
 8002f8a:	1882      	adds	r2, r0, r2
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d100      	bne.n	8002f92 <memset+0xa>
 8002f90:	4770      	bx	lr
 8002f92:	7019      	strb	r1, [r3, #0]
 8002f94:	3301      	adds	r3, #1
 8002f96:	e7f9      	b.n	8002f8c <memset+0x4>

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	2600      	movs	r6, #0
 8002faa:	f000 f819 	bl	8002fe0 <_init>
 8002fae:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd8 <__libc_init_array+0x40>)
 8002fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8002fdc <__libc_init_array+0x44>)
 8002fb2:	1b64      	subs	r4, r4, r5
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	00b3      	lsls	r3, r6, #2
 8002fbe:	58eb      	ldr	r3, [r5, r3]
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	00b3      	lsls	r3, r6, #2
 8002fc8:	58eb      	ldr	r3, [r5, r3]
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003088 	.word	0x08003088
 8002fd4:	08003088 	.word	0x08003088
 8002fd8:	0800308c 	.word	0x0800308c
 8002fdc:	08003088 	.word	0x08003088

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	46c0      	nop			@ (mov r8, r8)
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
